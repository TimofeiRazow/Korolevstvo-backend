# routes/bookings.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telegram

from flask import Blueprint, request, jsonify
from datetime import datetime, date, time
from models import db, Booking, Service
from utils.validators import validate_booking_data
from utils.email_utils import send_booking_notification as send_email_notification
import asyncio
# –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢
from utils.helpers import generate_booking_number

from utils.telegram_integration import send_telegram_booking_notification, is_telegram_notifications_enabled
TELEGRAM_AVAILABLE = True


bookings_bp = Blueprint('bookings', __name__)

@bookings_bp.route('/', methods=['POST'])
def create_booking():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    data = request.get_json()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    errors = validate_booking_data(data)
    print(errors)
    if errors:
        return jsonify({'errors': errors}), 400
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
        booking = Booking(
            name=data['name'],
            phone=data['phone'],
            email=data.get('email'),
            service_id=data.get('service_id'),
            event_date=datetime.strptime(data['event_date'], '%Y-%m-%d').date() if data.get('event_date') else None,
            event_time=datetime.strptime(data['event_time'], '%H:%M').time() if data.get('event_time') else None,
            guests_count=data.get('guests_count'),
            budget=data.get('budget'),
            location=data.get('location'),
            message=data.get('message', ''),
            status='new'
        )
        
        db.session.add(booking)
        db.session.commit()
        
        print(f"\nüéâ === –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –°–û–ó–î–ê–ù–ê ===")
        print(f"üìã ID: #{booking.id}")
        print(f"üë§ –ò–º—è: {booking.name}")
        print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking.phone}")
        print(f"üé™ –£—Å–ª—É–≥–∞: {booking.service.title if booking.service else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        email_sent = False
        email_error = None
        try:
            print("üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email...")
            send_email_notification(booking)
            email_sent = True
            print("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            email_error = str(e)
            print(f"‚ùå Email –æ—à–∏–±–∫–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        telegram_sent = False
        telegram_error = None
        telegram_status = {}
        
        if TELEGRAM_AVAILABLE:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
                from utils.telegram_integration import validate_telegram_settings
                telegram_status = validate_telegram_settings()
                print(telegram_status)
                print(f"üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
                print(f"   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {telegram_status['notifications_enabled']}")
                print(f"   - Chat ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {telegram_status['chat_id_configured']}")
                print(f"   - Chat ID: {telegram_status.get('chat_id', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}")
                print(f"   - –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {telegram_status['service_available']}")
                print(f"   - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ: {telegram_status['ready']}")
                
                asyncio.run(send_telegram_booking_notification(booking))
 
                
            except Exception as e:
                telegram_error = str(e)
                print(f"‚ùå Telegram –æ—à–∏–±–∫–∞: {e}")
        else:
            telegram_error = "Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            print("‚ö†Ô∏è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—â—à—â—à—â—à—à—â—â")
        
        print(f"üèÅ === –ó–ê–Ø–í–ö–ê #{booking.id} –û–ë–†–ê–ë–û–¢–ê–ù–ê ===\n")
        
        return jsonify({
            'booking': booking.to_dict(),
            'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!'
        }), 201
    
    except Exception as e:
        db.session.rollback()
        print(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏'}), 500
    
    
@bookings_bp.route('/<int:booking_id>', methods=['PUT'])
def update_booking(booking_id):
    """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    print(f"\nüîÑ === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò #{booking_id} ===")
    
    booking = Booking.query.get_or_404(booking_id)
    data = request.get_json()
    
    print(f"üìã –¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞:")
    print(f"   ID: {booking.id}")
    print(f"   –ò–º—è: {booking.name}")
    print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {booking.phone}")
    print(f"   –°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {booking.status}")
    
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    
    try:
        old_status = booking.status
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        if 'status' in data:
            booking.status = data['status']
            print(f"üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {old_status} ‚Üí {booking.status}")
        else:
            print("‚ö†Ô∏è –ü–æ–ª–µ 'status' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö")
            
        if 'event_date' in data and data['event_date']:
            booking.event_date = datetime.strptime(data['event_date'], '%Y-%m-%d').date()
        if 'event_time' in data and data['event_time']:
            booking.event_time = datetime.strptime(data['event_time'], '%H:%M').time()
        if 'guests_count' in data:
            booking.guests_count = data['guests_count']
        if 'location' in data:
            booking.location = data['location']
        if 'message' in data:
            booking.message = data['message']
        
        db.session.commit()
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        status_changed = old_status != booking.status
        is_notifiable_status = booking.status in ['confirmed', 'in-progress', 'completed', 'cancelled']
    
        
        print(f"üèÅ === –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø #{booking_id} ===\n")
        
        return jsonify({
            'booking': booking.to_dict(),
            'message': '–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!',
            'debug': {
                'old_status': old_status,
                'new_status': booking.status,
                'status_changed': status_changed,
                'notification_conditions_met': status_changed and is_notifiable_status and bool(booking.phone)
            }
        })
    
    except Exception as e:
        db.session.rollback()
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏'}), 500

@bookings_bp.route('/quick-request', methods=['POST'])
def quick_request():
    """–ë—ã—Å—Ç—Ä–∞—è –∑–∞—è–≤–∫–∞ (–º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö) —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
    data = request.get_json()
    
    if not data.get('phone'):
        return jsonify({'error': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
    
    try:
        booking = Booking(
            name=data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            phone=data['phone'],
            message=data.get('message', '–ë—ã—Å—Ç—Ä–∞—è –∑–∞—è–≤–∫–∞ - –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'),
            status='new'
        )
        
        db.session.add(booking)
        db.session.commit()
        
        return jsonify({
            'booking_id': booking.id,
            'message': '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.'
        }), 201
    
    except Exception as e:
        db.session.rollback()
        print(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π –∑–∞—è–≤–∫–∏: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏'}), 500

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

@bookings_bp.route('/', methods=['GET'])
def get_all_bookings():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = request.args.get('page', 1, type=int)
        per_page = min(request.args.get('per_page', 10, type=int), 100)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        status = request.args.get('status')
        service_id = request.args.get('service_id', type=int)
        date_from = request.args.get('date_from')
        date_to = request.args.get('date_to')
        search = request.args.get('search')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sort_by = request.args.get('sort_by', 'created_at')
        sort_order = request.args.get('sort_order', 'desc')
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = Booking.query
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if status:
            query = query.filter(Booking.status == status)
        
        if service_id:
            query = query.filter(Booking.service_id == service_id)
        
        if date_from:
            try:
                date_from_obj = datetime.strptime(date_from, '%Y-%m-%d').date()
                query = query.filter(Booking.event_date >= date_from_obj)
            except ValueError:
                return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã date_from. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD'}), 400
        
        if date_to:
            try:
                date_to_obj = datetime.strptime(date_to, '%Y-%m-%d').date()
                query = query.filter(Booking.event_date <= date_to_obj)
            except ValueError:
                return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã date_to. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD'}), 400
        
        if search:
            search_pattern = f'%{search}%'
            query = query.filter(
                db.or_(
                    Booking.name.ilike(search_pattern),
                    Booking.phone.ilike(search_pattern),
                    Booking.email.ilike(search_pattern)
                )
            )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        valid_sort_fields = ['id', 'name', 'phone', 'event_date', 'event_time', 'status', 'created_at', 'updated_at']
        if sort_by not in valid_sort_fields:
            sort_by = 'created_at'
        
        sort_column = getattr(Booking, sort_by)
        if sort_order.lower() == 'asc':
            query = query.order_by(sort_column.asc())
        else:
            query = query.order_by(sort_column.desc())
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        paginated_bookings = query.paginate(
            page=page,
            per_page=per_page,
            error_out=False
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        bookings_data = []
        for booking in paginated_bookings.items:
            booking_dict = booking.to_dict()
            bookings_data.append(booking_dict)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        stats = db.session.query(
            Booking.status,
            db.func.count(Booking.id).label('count')
        ).group_by(Booking.status).all()
        
        status_stats = {stat.status: stat.count for stat in stats}
        
        return jsonify({
            'bookings': bookings_data,
            'pagination': {
                'page': paginated_bookings.page,
                'pages': paginated_bookings.pages,
                'per_page': paginated_bookings.per_page,
                'total': paginated_bookings.total,
                'has_next': paginated_bookings.has_next,
                'has_prev': paginated_bookings.has_prev,
                'next_num': paginated_bookings.next_num,
                'prev_num': paginated_bookings.prev_num
            },
            'filters': {
                'status': status,
                'service_id': service_id,
                'date_from': date_from,
                'date_to': date_to,
                'search': search,
                'sort_by': sort_by,
                'sort_order': sort_order
            },
            'stats': {
                'total_bookings': paginated_bookings.total,
                'status_breakdown': status_stats
            }
        }), 200
        
    except Exception as e:
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫',
            'details': str(e)
        }), 500

@bookings_bp.route('/<int:booking_id>', methods=['GET'])
def get_booking(booking_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ ID"""
    booking = Booking.query.get_or_404(booking_id)
    return jsonify({'booking': booking.to_dict()})

@bookings_bp.route('/check-availability', methods=['GET'])
def check_availability():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç—ã"""
    event_date = request.args.get('date')
    service_id = request.args.get('service_id', type=int)
    
    if not event_date:
        return jsonify({'error': 'Date parameter is required'}), 400
    
    try:
        check_date = datetime.strptime(event_date, '%Y-%m-%d').date()
    except ValueError:
        return jsonify({'error': 'Invalid date format'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    query = Booking.query.filter(
        Booking.event_date == check_date,
        Booking.status.in_(['confirmed', 'new'])
    )
    
    if service_id:
        query = query.filter(Booking.service_id == service_id)
    
    bookings = query.all()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    all_slots = [
        '10:00', '11:00', '12:00', '13:00', '14:00', 
        '15:00', '16:00', '17:00', '18:00', '19:00'
    ]
    
    booked_slots = [booking.event_time.strftime('%H:%M') for booking in bookings if booking.event_time]
    available_slots = [slot for slot in all_slots if slot not in booked_slots]
    
    return jsonify({
        'date': event_date,
        'available': len(available_slots) > 0,
        'available_slots': available_slots,
        'booked_slots': booked_slots,
        'total_bookings': len(bookings)
    })

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Telegram
@bookings_bp.route('/debug/telegram/<phone>', methods=['GET'])
def debug_telegram_user(phone):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
    try:
        from utils.telegram_bot import debug_check_user
        user = debug_check_user(phone)
        
        if user:
            return jsonify({
                'found': True,
                'user': {
                    'id': user.id,
                    'telegram_id': user.telegram_id,
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'phone': user.phone,
                    'is_verified': user.is_verified,
                    'created_at': user.created_at.isoformat(),
                    'last_activity': user.last_activity.isoformat() if user.last_activity else None
                }
            })
        else:
            return jsonify({
                'found': False,
                'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
    
    except Exception as e:
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'details': str(e)
        }), 500

# –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Telegram
@bookings_bp.route('/test/telegram/<phone>', methods=['POST'])
def test_telegram_notification(phone):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        from utils.telegram_bot import send_telegram_message, debug_check_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = debug_check_user(phone)
        if not user:
            return jsonify({'error': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        if not user.is_verified:
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}), 400
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = f"""üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–≠—Ç–æ —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –ß—É–¥–µ—Å.

–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

        result = send_telegram_message(user.telegram_id, test_message)
        
        return jsonify({
            'success': result,
            'message': '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if result else '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
            'user': user.get_display_name(),
            'telegram_id': user.telegram_id
        })
    
    except Exception as e:
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
            'details': str(e)
        }), 500