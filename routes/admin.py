from flask import Blueprint, request, jsonify
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity
from datetime import datetime, timedelta
from models import db, Booking, Review, Service
from sqlalchemy import func, desc

admin_bp = Blueprint('admin', __name__)

# –ü—Ä–æ—Å—Ç–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
ADMIN_CREDENTIALS = {
    'admin': 'admin123',  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã
    'manager': 'manager123'
}

@admin_bp.route('/login', methods=['POST'])
def admin_login():
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    
    if username in ADMIN_CREDENTIALS and ADMIN_CREDENTIALS[username] == password:
        access_token = create_access_token(
            identity=username,
            expires_delta=timedelta(hours=8)
        )
        return jsonify({
            'access_token': access_token,
            'username': username,
            'message': '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
        })
    
    return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}), 401

@admin_bp.route('/dashboard', methods=['GET'])
@jwt_required()
def get_dashboard():
    
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞"""
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    thirty_days_ago = datetime.utcnow() - timedelta(days=30)
    
    stats = {
        'bookings': {
            'total': Booking.query.count(),
            'new': Booking.query.filter(Booking.status == 'new').count(),
            'confirmed': Booking.query.filter(Booking.status == 'confirmed').count(),
            'this_month': Booking.query.filter(Booking.created_at >= thirty_days_ago).count()
        },
        'reviews': {
            'total': Review.query.count(),
            'pending': Review.query.filter(Review.approved == False).count(),
            'average_rating': db.session.query(func.avg(Review.rating)).filter(Review.approved == True).scalar() or 0
        },
        'services': {
            'total': Service.query.count(),
            'featured': Service.query.filter(Service.featured == True).count()
        }
    }
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
    recent_bookings = Booking.query.order_by(desc(Booking.created_at)).limit(10).all()
    
    # –û—Ç–∑—ã–≤—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    pending_reviews = Review.query.filter(Review.approved == False).limit(5).all()

    return jsonify({
        'stats': stats,
        'recent_bookings': [booking.to_dict() for booking in recent_bookings],
        'pending_reviews': [review.to_dict() for review in pending_reviews]
    })


@admin_bp.route('/bookings', methods=['GET'])
@jwt_required()
def get_admin_bookings():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    page = request.args.get('page', 1, type=int)
    per_page = min(request.args.get('per_page', 20, type=int), 100)
    status = request.args.get('status')
    
    query = Booking.query
    
    if status:
        query = query.filter(Booking.status == status)
    
    query = query.order_by(desc(Booking.created_at))
    
    pagination = query.paginate(
        page=page, 
        per_page=per_page, 
        error_out=False
    )
    
    return jsonify({
        'bookings': [booking.to_dict() for booking in pagination.items],
        'pagination': {
            'page': page,
            'per_page': per_page,
            'total': pagination.total,
            'pages': pagination.pages
        }
    })

@admin_bp.route('/bookings/<int:booking_id>', methods=['PUT'])
@jwt_required()
def update_booking_status(booking_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print(f"\nüîß === –ê–î–ú–ò–ù: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò #{booking_id} ===")
    
    booking = Booking.query.get_or_404(booking_id)
    data = request.get_json()
    
    new_status = data.get('status')
    if new_status not in ['new', 'confirmed', 'in-progress', 'cancelled', 'completed']:
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å'}), 400
    
    print(f"üìã –ó–∞—è–≤–∫–∞:")
    print(f"   ID: {booking.id}")
    print(f"   –ò–º—è: {booking.name}")
    print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {booking.phone}")
    print(f"   –°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {booking.status}")
    print(f"   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
    
    try:
        old_status = booking.status
        booking.status = new_status
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if 'event_date' in data and data['event_date']:
            booking.event_date = datetime.strptime(data['event_date'], '%Y-%m-%d').date()
        if 'event_time' in data and data['event_time']:
            booking.event_time = datetime.strptime(data['event_time'], '%H:%M').time()
        if 'location' in data:
            booking.location = data['location']
        if 'message' in data:
            booking.message = data['message']
        
        db.session.commit()
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        status_changed = old_status != new_status
        is_notifiable_status = booking.status in ['confirmed', 'in-progress', 'completed', 'cancelled']
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π Telegram:")
        print(f"   –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: {status_changed}")
        print(f"   –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞—Ç—É—Å: {is_notifiable_status}")
        print(f"   –¢–µ–ª–µ—Ñ–æ–Ω –µ—Å—Ç—å: {bool(booking.phone)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        telegram_sent = False
        if status_changed and is_notifiable_status and booking.phone:
            print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
            
            try:
                from utils.telegram_bot import send_booking_notification
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from models import TelegramUser
                telegram_user = TelegramUser.query.filter_by(phone=booking.phone, is_verified=True).first()
                
                if telegram_user:
                    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {telegram_user.get_display_name()}")
                    
                    result = send_booking_notification(booking, new_status)
                    
                    if result:
                        print("üéâ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –£–°–ü–ï–®–ù–û!")
                        telegram_sent = True
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {booking.phone} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram")
                    print("üí° –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É")
                    
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram: {e}")
                import traceback
                traceback.print_exc()
        else:
            if not status_changed:
                print("‚è≠Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ")
            elif not is_notifiable_status:
                print(f"‚è≠Ô∏è –°—Ç–∞—Ç—É—Å '{new_status}' –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            elif not booking.phone:
                print("‚è≠Ô∏è –ù–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        print(f"üèÅ === –ê–î–ú–ò–ù: –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø #{booking_id} ===\n")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'booking': booking.to_dict(),
            'message': f'–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}',
            'notifications': {
                'telegram_sent': telegram_sent,
                'telegram_available': bool(booking.phone)
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if telegram_sent:
            response_data['message'] += ' ‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        elif booking.phone and status_changed and is_notifiable_status:
            response_data['message'] += ' ‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–æ—Ç–µ)'
        
        return jsonify(response_data)
    
    except Exception as e:
        db.session.rollback()
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∞–¥–º–∏–Ω-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏'}), 500

@admin_bp.route('/reviews', methods=['GET'])
@jwt_required()
def get_admin_reviews():
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    pending_only = request.args.get('pending_only', False, type=bool)
    
    query = Review.query
    
    if pending_only:
        query = query.filter(Review.approved == False)
    
    reviews = query.order_by(desc(Review.created_at)).all()
    
    return jsonify({
        'reviews': [review.to_dict() for review in reviews]
    })

@admin_bp.route('/reviews/<int:review_id>/approve', methods=['PUT'])
@jwt_required()
def approve_review(review_id):
    """–û–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤"""
    review = Review.query.get_or_404(review_id)
    
    try:
        review.approved = True
        db.session.commit()
        
        return jsonify({
            'message': '–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω',
            'review': review.to_dict()
        })
    
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏'}), 500

@admin_bp.route('/analytics', methods=['GET'])
@jwt_required()
def get_analytics():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_bookings = db.session.query(
        func.strftime('%Y-%m', Booking.created_at).label('month'),
        func.count(Booking.id).label('count')
    ).group_by(func.strftime('%Y-%m', Booking.created_at)).limit(12).all()
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏
    popular_services = db.session.query(
        Service.title,
        func.count(Booking.id).label('bookings_count')
    ).join(Booking).group_by(Service.id).order_by(
        func.count(Booking.id).desc()
    ).limit(10).all()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_stats = db.session.query(
        Booking.status,
        func.count(Booking.id).label('count')
    ).group_by(Booking.status).all()
    
    return jsonify({
        'monthly_bookings': [
            {'month': month, 'count': count} 
            for month, count in monthly_bookings
        ],
        'popular_services': [
            {'service': title, 'bookings': count} 
            for title, count in popular_services
        ],
        'status_distribution': [
            {'status': status, 'count': count} 
            for status, count in status_stats
        ]
    })