from flask import Blueprint, request, jsonify
from sqlalchemy import desc, func
from models import db, Review, Service
from utils.validators import validate_review_data
from datetime import datetime
from flask import Blueprint, request, jsonify
from sqlalchemy import desc, func, or_, and_
from models import db, Review, Service
from utils.auth import admin_required, token_required
import re
import csv
import io

reviews_bp = Blueprint('reviews', __name__)

@reviews_bp.route('/', methods=['GET', 'OPTIONS'])
def get_reviews():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if request.method == "OPTIONS":
        return '', 204  # preflight OK –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    page = request.args.get('page', 1, type=int)
    per_page = min(request.args.get('per_page', 20, type=int), 100)
    service_id = request.args.get('service_id', type=int)
    rating = request.args.get('rating', type=int)
    approved_only = request.args.get('approved_only', True, type=bool)
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = Review.query
    
    # –§–∏–ª—å—Ç—Ä—ã
    if approved_only:
        query = query.filter(Review.approved == True)
    
    if service_id:
        query = query.filter(Review.service_id == service_id)
    
    if rating:
        query = query.filter(Review.rating == rating)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    query = query.order_by(desc(Review.created_at))
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination = query.paginate(
        page=page, 
        per_page=per_page, 
        error_out=False
    )
    
    reviews = [review.to_dict() for review in pagination.items]
    
    return jsonify({
        'reviews': reviews,
        'pagination': {
            'page': page,
            'per_page': per_page,
            'total': pagination.total,
            'pages': pagination.pages,
            'has_next': pagination.has_next,
            'has_prev': pagination.has_prev
        }
    })

@reviews_bp.route('/send', methods=['POST', 'OPTIONS'])
def create_review():
    if request.method == "OPTIONS":
        return '', 204  # preflight OK –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)"""
    data = request.get_json()
    
    if not data:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}), 400
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    errors = validate_review_data(data)
    if errors:
        return jsonify({'errors': errors}), 400
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if is_spam_content(data.get('text', '')):
        return jsonify({'error': '–û—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'}), 400
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
        review = Review(
            name=data['name'].strip(),
            rating=int(data['rating']),
            text=data['text'].strip(),
            service_type=data.get('service_type', '').strip() if data.get('service_type') else None,
            service_id=data.get('service_id') if data.get('service_id') else None,
            avatar=data.get('avatar', 'üë§'),
            approved=False  # –¢—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            
        )
        
        db.session.add(review)
        db.session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # send_admin_notification('new_review', review.to_dict())
        
        return jsonify({
            'message': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.',
            'review_id': review.id
        }), 201
    
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞'}), 500

@reviews_bp.route('/<int:review_id>', methods=['GET'])
def get_review(review_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–∑—ã–≤"""
    review = Review.query.get_or_404(review_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    if not review.approved:
        return jsonify({'error': '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    
    return jsonify({'review': review.to_dict()})

@reviews_bp.route('/stats', methods=['GET'])
def get_review_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    total_reviews = Review.query.filter(Review.approved == True).count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
    rating_stats = db.session.query(
        Review.rating,
        func.count(Review.id).label('count')
    ).filter(Review.approved == True).group_by(Review.rating).all()
    
    # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    avg_rating = db.session.query(
        func.avg(Review.rating).label('average')
    ).filter(Review.approved == True).scalar()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
    recent_reviews = Review.query.filter(
        Review.approved == True
    ).order_by(desc(Review.created_at)).limit(5).all()
    
    return jsonify({
        'total_reviews': total_reviews,
        'average_rating': round(avg_rating, 1) if avg_rating else 0,
        'rating_distribution': [
            {'rating': rating, 'count': count} 
            for rating, count in rating_stats
        ],
        'recent_reviews': [review.to_dict() for review in recent_reviews]
    })

@reviews_bp.route('/by-service/<int:service_id>', methods=['GET'])
def get_reviews_by_service(service_id):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–µ"""
    service = Service.query.get_or_404(service_id)
    
    reviews = Review.query.filter(
        Review.service_id == service_id,
        Review.approved == True
    ).order_by(desc(Review.created_at)).all()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ç–æ–π —É—Å–ª—É–≥–µ
    if reviews:
        avg_rating = sum(r.rating for r in reviews) / len(reviews)
        rating_counts = {}
        for r in reviews:
            rating_counts[r.rating] = rating_counts.get(r.rating, 0) + 1
    else:
        avg_rating = 0
        rating_counts = {}
    
    return jsonify({
        'service': service.to_dict(),
        'reviews': [review.to_dict() for review in reviews],
        'stats': {
            'total': len(reviews),
            'average_rating': round(avg_rating, 1),
            'rating_distribution': rating_counts
        }
    })

@reviews_bp.route('/featured', methods=['GET'])
def get_featured_reviews():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (—Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º)"""
    limit = request.args.get('limit', 6, type=int)
    
    reviews = Review.query.filter(
        Review.approved == True,
        Review.rating >= 4
    ).order_by(desc(Review.rating), desc(Review.created_at)).limit(limit).all()
    
    return jsonify({
        'reviews': [review.to_dict() for review in reviews]
    })

@reviews_bp.route('/search', methods=['GET'])
def search_reviews():
    """–ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É"""
    query_text = request.args.get('q', '').strip()
    limit = request.args.get('limit', 10, type=int)
    
    if not query_text:
        return jsonify({'reviews': []})
    
    reviews = Review.query.filter(
        Review.approved == True,
        Review.text.contains(query_text)
    ).order_by(desc(Review.created_at)).limit(limit).all()
    
    return jsonify({
        'reviews': [review.to_dict() for review in reviews],
        'query': query_text,
        'total_found': len(reviews)
    })

@reviews_bp.route('/moderate/<int:review_id>', methods=['PUT'])
def moderate_review(review_id):
    """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    review = Review.query.get_or_404(review_id)
    data = request.get_json()
    
    action = data.get('action')  # 'approve' –∏–ª–∏ 'reject'
    
    if action not in ['approve', 'reject']:
        return jsonify({'error': 'Invalid action'}), 400
    
    try:
        if action == 'approve':
            review.approved = True
            message = '–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω'
        else:
            db.session.delete(review)
            message = '–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω'
        
        db.session.commit()
        
        return jsonify({'message': message})
    
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}), 500

@reviews_bp.route('/pending', methods=['GET'])
def get_pending_reviews():
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    page = request.args.get('page', 1, type=int)
    per_page = min(request.args.get('per_page', 20, type=int), 100)
    
    pagination = Review.query.filter(
        Review.approved == False
    ).order_by(desc(Review.created_at)).paginate(
        page=page, 
        per_page=per_page, 
        error_out=False
    )
    
    reviews = [review.to_dict() for review in pagination.items]
    
    return jsonify({
        'reviews': reviews,
        'pagination': {
            'page': page,
            'per_page': per_page,
            'total': pagination.total,
            'pages': pagination.pages,
            'has_next': pagination.has_next,
            'has_prev': pagination.has_prev
        }
    })

def is_spam_content(text):
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç"""
    spam_patterns = [
        r'https?://\S+',  # URL —Å—Å—ã–ª–∫–∏
        r'[–∞-—è–ê-–Ø]*[0-9]{3,}[–∞-—è–ê-–Ø]*',  # –ú–Ω–æ–≥–æ —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
        r'(.)\1{4,}',  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
    ]
    
    for pattern in spam_patterns:
        if re.search(pattern, text):
            return True
    
    return False


# routes/reviews.py - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Ç–∑—ã–≤–∞–º–∏



# ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# ============ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ ============

@reviews_bp.route('/admin/reviews', methods=['GET'])
@admin_required
def get_all_reviews_admin():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ (–≤–∫–ª—é—á–∞—è –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ)"""
    page = request.args.get('page', 1, type=int)
    per_page = min(request.args.get('per_page', 20, type=int), 100)
    status = request.args.get('status', 'all')  # 'approved', 'pending', 'all'
    rating = request.args.get('rating', type=int)
    service_type = request.args.get('service_type')
    search = request.args.get('search', '').strip()
    sort = request.args.get('sort', 'created_at')
    order = request.args.get('order', 'desc')
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = Review.query
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status == 'approved':
        query = query.filter(Review.approved == True)
    elif status == 'pending':
        query = query.filter(Review.approved == False)
    # –î–ª—è 'all' –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    
    # –î—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    if rating:
        query = query.filter(Review.rating == rating)
    
    if service_type:
        query = query.filter(Review.service_type == service_type)
    
    if search:
        search_filter = or_(
            Review.name.contains(search),
            Review.text.contains(search),
            Review.service_type.contains(search)
        )
        query = query.filter(search_filter)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if hasattr(Review, sort):
        if order == 'desc':
            query = query.order_by(desc(getattr(Review, sort)))
        else:
            query = query.order_by(getattr(Review, sort))
    else:
        query = query.order_by(desc(Review.created_at))
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination = query.paginate(
        page=page, 
        per_page=per_page, 
        error_out=False
    )
    
    reviews = [review.to_dict() for review in pagination.items]
    
    return jsonify({
        'reviews': reviews,
        'pagination': {
            'page': page,
            'per_page': per_page,
            'total': pagination.total,
            'pages': pagination.pages,
            'has_next': pagination.has_next,
            'has_prev': pagination.has_prev
        }
    })

@reviews_bp.route('/admin/reviews', methods=['POST'])
@admin_required
def create_admin_review():
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    data = request.get_json()
    
    if not data:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}), 400
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    errors = validate_review_data(data)
    if errors:
        return jsonify({'errors': errors}), 400
    
    try:
        review = Review(
            name=data['name'].strip(),
            rating=int(data['rating']),
            text=data['text'].strip(),
            service_type=data.get('service_type', '').strip() if data.get('service_type') else None,
            email=data.get('email', '').strip() if data.get('email') else None,
            phone=data.get('phone', '').strip() if data.get('phone') else None,
            approved=True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º –æ—Ç–∑—ã–≤—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏
        )
        
        db.session.add(review)
        db.session.commit()
        
        return jsonify({
            'message': '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            'review': review.to_dict()
        }), 201
    
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞'}), 500

@reviews_bp.route('/admin/reviews/<int:review_id>', methods=['PUT', 'OPTIONS'])
@admin_required
def update_review(review_id):
    """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–∑—ã–≤"""
    if request.method == "OPTIONS":
        return '', 204  # preflight OK –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    review = Review.query.get_or_404(review_id)
    data = request.get_json()
    
    if not data:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}), 400
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    errors = validate_review_data(data)
    if errors:
        return jsonify({'errors': errors}), 400
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        review.name = data['name'].strip()
        review.rating = int(data['rating'])
        review.text = data['text'].strip()
        review.service_type = data.get('service_type', '').strip() if data.get('service_type') else None
        review.email = data.get('email', '').strip() if data.get('email') else None
        review.phone = data.get('phone', '').strip() if data.get('phone') else None
        review.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            'message': '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            'review': review.to_dict()
        })
    
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞'}), 500

@reviews_bp.route('/admin/reviews/<int:review_id>', methods=['DELETE', 'OPTIONS'])
@admin_required
def delete_review(review_id):
    """–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤"""
    if request.method == "OPTIONS":
        return '', 204  # preflight OK –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    review = Review.query.get_or_404(review_id)
    
    try:
        db.session.delete(review)
        db.session.commit()
        
        return jsonify({'message': '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'})
    
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞'}), 500

@reviews_bp.route('/admin/reviews/bulk-approve', methods=['POST'])
@admin_required
def bulk_approve_reviews():
    """–ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤"""
    data = request.get_json()
    review_ids = data.get('review_ids', [])
    
    if not review_ids:
        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –æ—Ç–∑—ã–≤–æ–≤'}), 400
    
    try:
        updated_count = Review.query.filter(
            Review.id.in_(review_ids)
        ).update({'approved': True}, synchronize_session=False)
        
        db.session.commit()
        
        return jsonify({
            'message': f'–û–¥–æ–±—Ä–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {updated_count}',
            'updated_count': updated_count
        })
    
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤'}), 500

@reviews_bp.route('/admin/reviews/bulk-delete', methods=['POST'])
@admin_required
def bulk_delete_reviews():
    """–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤"""
    data = request.get_json()
    review_ids = data.get('review_ids', [])
    
    if not review_ids:
        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –æ—Ç–∑—ã–≤–æ–≤'}), 400
    
    try:
        deleted_count = Review.query.filter(
            Review.id.in_(review_ids)
        ).delete(synchronize_session=False)
        
        db.session.commit()
        
        return jsonify({
            'message': f'–£–¥–∞–ª–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {deleted_count}',
            'deleted_count': deleted_count
        })
    
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤'}), 500

@reviews_bp.route('/admin/reviews/<int:review_id>/featured', methods=['PUT'])
@admin_required
def toggle_review_featured(review_id):
    """–û—Ç–º–µ—Ç–∏—Ç—å/—Å–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    review = Review.query.get_or_404(review_id)
    data = request.get_json()
    
    featured = data.get('featured', True)
    
    try:
        review.featured = featured
        db.session.commit()
        
        action = '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ' if featured else '—É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö'
        return jsonify({
            'message': f'–û—Ç–∑—ã–≤ {action}',
            'review': review.to_dict()
        })
    
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞'}), 500

@reviews_bp.route('/admin/reviews/stats', methods=['GET'])
@admin_required
def get_admin_review_stats():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_reviews = Review.query.count()
        approved_reviews = Review.query.filter(Review.approved == True).count()
        pending_reviews = Review.query.filter(Review.approved == False).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
        rating_stats = db.session.query(
            Review.rating,
            func.count(Review.id).label('count')
        ).group_by(Review.rating).all()
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        avg_rating = db.session.query(
            func.avg(Review.rating).label('average')
        ).filter(Review.approved == True).scalar()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º
        service_stats = db.session.query(
            Review.service_type,
            func.count(Review.id).label('count'),
            func.avg(Review.rating).label('avg_rating')
        ).filter(
            Review.approved == True,
            Review.service_type.isnot(None)
        ).group_by(Review.service_type).all()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤)
        monthly_stats = db.session.query(
            func.date_trunc('month', Review.created_at).label('month'),
            func.count(Review.id).label('count')
        ).filter(
            Review.created_at >= datetime.utcnow().replace(month=1, day=1)
        ).group_by(func.date_trunc('month', Review.created_at)).all()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
        recent_reviews = Review.query.order_by(
            desc(Review.created_at)
        ).limit(10).all()
        
        return jsonify({
            'total_reviews': total_reviews,
            'approved_reviews': approved_reviews,
            'pending_reviews': pending_reviews,
            'average_rating': round(avg_rating, 2) if avg_rating else 0,
            'rating_distribution': [
                {'rating': rating, 'count': count} 
                for rating, count in rating_stats
            ],
            'service_distribution': [
                {
                    'service': service_type,
                    'count': count,
                    'avg_rating': round(float(avg_rating), 2)
                }
                for service_type, count, avg_rating in service_stats
            ],
            'monthly_stats': [
                {
                    'month': month.isoformat(),
                    'count': count
                }
                for month, count in monthly_stats
            ],
            'recent_reviews': [review.to_dict() for review in recent_reviews]
        })
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}), 500

@reviews_bp.route('/admin/reviews/export', methods=['GET'])
@admin_required
def export_reviews():
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ CSV"""
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        approved_only = request.args.get('approved_only', 'true').lower() == 'true'
        service_type = request.args.get('service_type')
        rating = request.args.get('rating', type=int)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        query = Review.query
        
        if approved_only:
            query = query.filter(Review.approved == True)
        
        if service_type:
            query = query.filter(Review.service_type == service_type)
        
        if rating:
            query = query.filter(Review.rating == rating)
        
        reviews = query.order_by(desc(Review.created_at)).all()
        
        # –°–æ–∑–¥–∞–µ–º CSV
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            'ID',
            '–ò–º—è',
            'Email',
            '–¢–µ–ª–µ—Ñ–æ–Ω',
            '–£—Å–ª—É–≥–∞',
            '–†–µ–π—Ç–∏–Ω–≥',
            '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞',
            '–û–¥–æ–±—Ä–µ–Ω',
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
            '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for review in reviews:
            writer.writerow([
                review.id,
                review.name,
                review.email or '',
                review.phone or '',
                review.service_type or '',
                review.rating,
                review.text,
                '–î–∞' if review.approved else '–ù–µ—Ç',
                review.created_at.strftime('%Y-%m-%d %H:%M:%S') if review.created_at else '',
                review.updated_at.strftime('%Y-%m-%d %H:%M:%S') if review.updated_at else ''
            ])
        
        output.seek(0)
        
        from flask import Response
        return Response(
            output.getvalue(),
            mimetype='text/csv',
            headers={
                'Content-Disposition': f'attachment; filename=reviews_export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
            }
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return jsonify({'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö'}), 500

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

def is_spam_content(text):
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
    spam_patterns = [
        r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',
        r'\b(?:viagra|casino|loan|credit|money)\b',
        r'[A-Z]{5,}',  # –ú–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –ø–æ–¥—Ä—è–¥
        r'(.)\1{4,}',  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
    ]
    
    text_lower = text.lower()
    
    for pattern in spam_patterns:
        if re.search(pattern, text_lower, re.IGNORECASE):
            return True
    
    return False