# routes/warehouse.py - –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
from flask import Blueprint, request, jsonify, Response
from flask_jwt_extended import jwt_required, get_jwt_identity
from sqlalchemy import desc, func, or_, and_
from models import db, WarehouseItem, WarehouseCategory, WarehouseOperation, Admin, WarehouseItemCategory
from utils.barcode import get_product_from_service_online
from datetime import datetime, timedelta
import csv
import io
import json
import requests
from utils.helpers import get_client_ip

warehouse_bp = Blueprint('warehouse', __name__)

# ============ DASHBOARD / –ì–õ–ê–í–ù–ê–Ø ============

@warehouse_bp.route('/dashboard', methods=['GET'])
@jwt_required()
def get_warehouse_dashboard():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫–ª–∞–¥–∞"""
    try:
        from models import get_warehouse_stats
        stats = get_warehouse_stats()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        recent_operations = WarehouseOperation.query.order_by(
            desc(WarehouseOperation.created_at)
        ).limit(10).all()
        
        # –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
        low_stock_items = WarehouseItem.get_low_stock_items()
        
        # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.utcnow() - timedelta(days=30)
        active_items = db.session.query(
            WarehouseItem.id,
            WarehouseItem.name,
            func.count(WarehouseOperation.id).label('operation_count')
        ).join(WarehouseOperation).filter(
            WarehouseOperation.created_at >= thirty_days_ago
        ).group_by(WarehouseItem.id).order_by(
            desc(func.count(WarehouseOperation.id))
        ).limit(5).all()
        
        return jsonify({
            'stats': stats,
            'recent_operations': [op.to_dict() for op in recent_operations],
            'low_stock_items': [item.to_dict() for item in low_stock_items[:5]],
            'active_items': [
                {
                    'id': item_id,
                    'name': name,
                    'operation_count': count
                }
                for item_id, name, count in active_items
            ]
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ dashboard: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}'}), 500


# ============ –ö–ê–¢–ï–ì–û–†–ò–ò ============

@warehouse_bp.route('/categories', methods=['GET'])
@jwt_required()
def get_categories():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        parent_id = request.args.get('parent_id', type=int)
        include_children = request.args.get('include_children', 'true').lower() == 'true'
        
        print(f"üìÇ GET categories: parent_id={parent_id}, include_children={include_children}")
        
        query = WarehouseCategory.query
        
        if parent_id is not None:
            query = query.filter(WarehouseCategory.parent_id == parent_id)
        else:
            query = query.filter(WarehouseCategory.parent_id.is_(None))
        
        categories = query.order_by(WarehouseCategory.name).all()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        result = []
        for category in categories:
            try:
                cat_data = category.to_dict(include_children=include_children)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–∫–ª—é—á–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏) —á–µ—Ä–µ–∑ —Å–≤—è–∑—å many-to-many
                category_ids = [category.id]
                if include_children:
                    category_ids.extend(category.get_all_child_ids())
                
                items_count = db.session.query(WarehouseItem).join(WarehouseItemCategory).filter(
                    WarehouseItemCategory.category_id.in_(category_ids),
                    WarehouseItem.status == 'active'
                ).distinct().count()
                
                cat_data['items_count'] = items_count
                result.append(cat_data)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.id}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                result.append({
                    'id': category.id,
                    'name': category.name,
                    'items_count': 0,
                    'error': str(e)
                })
        
        print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(result)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return jsonify({'categories': result})
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ get_categories: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}'}), 500


@warehouse_bp.route('/categories', methods=['POST'])
@jwt_required()
def create_category():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    try:
        data = request.get_json()
        
        if not data.get('name'):
            return jsonify({'error': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        category = WarehouseCategory(
            name=data['name'].strip(),
            parent_id=data.get('parent_id'),
            description=data.get('description', '').strip(),
            color=data.get('color', '#6366f1')
        )
        
        db.session.add(category)
        db.session.commit()
        
        return jsonify({
            'message': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
            'category': category.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}'}), 500


@warehouse_bp.route('/categories/search', methods=['GET'])
@jwt_required()
def search_categories():
    """–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        query = request.args.get('q', '').strip()
        limit = min(request.args.get('limit', 10, type=int), 50)
        
        if not query:
            return jsonify({'categories': []})
        
        search_filter = f"%{query}%"
        from sqlalchemy import func

        categories = WarehouseCategory.query.filter(
            func.lower(WarehouseCategory.name).like(func.lower(search_filter))
        ).limit(limit).all()
        
        return jsonify({
            'categories': [
                {
                    'id': cat.id,
                    'name': cat.name,
                    'full_path': cat.get_full_path()
                }
                for cat in categories
            ]
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}'}), 500


# ============ –¢–û–í–ê–†–´ ============

@warehouse_bp.route('/items', methods=['POST'])
@jwt_required()
def create_item():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        data = request.get_json()
        current_user_id = get_jwt_identity()
        
        print(f"üì¶ POST /items - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['name']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
        if data.get('barcode'):
            existing_item = WarehouseItem.query.filter(
                WarehouseItem.barcode == data['barcode']
            ).first()
            if existing_item:
                return jsonify({'error': '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU
        if data.get('sku'):
            existing_item = WarehouseItem.query.filter(
                WarehouseItem.sku == data['sku']
            ).first()
            if existing_item:
                return jsonify({'error': '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        item = WarehouseItem(
            name=data['name'].strip(),
            barcode=data.get('barcode', '').strip() or None,
            sku=data.get('sku', '').strip() or None,
            description=data.get('description', '').strip(),
            unit=data.get('unit', '—à—Ç').strip(),
            min_quantity=data.get('min_quantity', 0),
            max_quantity=data.get('max_quantity', 1000),
            cost_price=data.get('cost_price', 0),
            current_quantity=data.get('current_quantity', 0)
        )
        
        db.session.add(item)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_ids = []
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if data.get('category_id'):
            category_ids.append(data['category_id'])
        
        if data.get('category_ids'):
            category_ids.extend(data['category_ids'])
        
        if data.get('category_names'):
            for category_name in data['category_names']:
                if category_name and category_name.strip():
                    category = WarehouseCategory.find_or_create_by_name(
                        name=category_name.strip()
                    )
                    category_ids.append(category.id)
        
        if data.get('category_name'):
            category = WarehouseCategory.find_or_create_by_name(
                name=data['category_name'].strip()
            )
            category_ids.append(category.id)
        
        # selectedCategories –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (AddItemModal)
        if data.get('selectedCategories'):
            for category_name in data['selectedCategories']:
                if category_name and category_name.strip():
                    category = WarehouseCategory.find_or_create_by_name(
                        name=category_name.strip()
                    )
                    category_ids.append(category.id)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID
        category_ids = list(set(category_ids))
        
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∫–∞–∑–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
        if category_ids:
            item.set_categories(category_ids)
            print(f"üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_ids}")
        else:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            default_category = WarehouseCategory.find_or_create_by_name("–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            item.set_categories([default_category.id])
            print(f"üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_category.id}")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        initial_quantity = data.get('current_quantity', 0)
        if initial_quantity > 0:
            operation = WarehouseOperation(
                item_id=item.id,
                operation_type='add',
                quantity_before=0,
                quantity_after=initial_quantity,
                quantity_change=initial_quantity,
                reason='–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫',
                user_id=current_user_id,
                ip_address=get_client_ip(request)
            )
            db.session.add(operation)
        
        db.session.commit()
        
        print(f"‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω: ID {item.id}")
        return jsonify({
            'message': '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            'item': item.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}'}), 500


@warehouse_bp.route('/items', methods=['GET'])
@jwt_required()
def get_items():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        page = request.args.get('page', 1, type=int)
        per_page = min(request.args.get('per_page', 20, type=int), 100)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç–∞—Ä–æ–≥–æ, —Ç–∞–∫ –∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_ids = request.args.getlist('category_ids')  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ
        category_id = request.args.get('category_id', type=int)  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        
        search = request.args.get('search', '').strip()
        status = request.args.get('status', 'active')
        sort_by = request.args.get('sort_by', 'name')
        sort_order = request.args.get('sort_order', 'asc')
        stock_filter = request.args.get('stock_filter')
        
        print(f"üîç GET /items - params: page={page}, category_id={category_id}, category_ids={category_ids}, status={status}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º category_ids (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if category_id:
            category_ids.append(str(category_id))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ integers –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        try:
            category_ids = list(set([int(cid) for cid in category_ids if cid and str(cid).isdigit()]))
        except (ValueError, TypeError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è category_ids: {e}")
            category_ids = []
        
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {category_ids}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        query = WarehouseItem.query
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if status and status != 'all':
            query = query.filter(WarehouseItem.status == status)
            print(f"üîñ –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: {status}")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —á–µ—Ä–µ–∑ many-to-many —Å–≤—è–∑—å
        if category_ids:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                all_category_ids = []
                for cat_id in category_ids:
                    all_category_ids.append(cat_id)
                    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –µ—ë –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    category = WarehouseCategory.query.get(cat_id)
                    if category:
                        child_ids = category.get_all_child_ids()
                        all_category_ids.extend(child_ids)
                        print(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id} ({category.name}): +{len(child_ids)} –¥–æ—á–µ—Ä–Ω–∏—Ö")
                
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                all_category_ids = list(set(all_category_ids))
                print(f"üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: {all_category_ids}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤—è–∑—å many-to-many
                query = query.join(WarehouseItemCategory).filter(
                    WarehouseItemCategory.category_id.in_(all_category_ids)
                ).distinct()
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                pass
        
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if search:
            search_filter = f"%{search}%"
            query = query.filter(
                or_(
                    WarehouseItem.name.ilike(search_filter),
                    WarehouseItem.barcode.ilike(search_filter),
                    WarehouseItem.sku.ilike(search_filter),
                    WarehouseItem.description.ilike(search_filter)
                )
            )
            print(f"üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É: '{search}'")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
        if stock_filter and stock_filter != 'all':
            if stock_filter == 'low':
                query = query.filter(WarehouseItem.current_quantity <= WarehouseItem.min_quantity)
            elif stock_filter == 'out':
                query = query.filter(WarehouseItem.current_quantity == 0)
            elif stock_filter == 'overstocked':
                query = query.filter(WarehouseItem.current_quantity > WarehouseItem.max_quantity)
            elif stock_filter == 'normal':
                query = query.filter(
                    and_(
                        WarehouseItem.current_quantity > WarehouseItem.min_quantity,
                        WarehouseItem.current_quantity <= WarehouseItem.max_quantity
                    )
                )
            print(f"üìä –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º: {stock_filter}")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        try:
            if sort_by == 'quantity':
                sort_column = WarehouseItem.current_quantity
            elif sort_by == 'value':
                sort_column = WarehouseItem.current_quantity * WarehouseItem.cost_price
            elif hasattr(WarehouseItem, sort_by):
                sort_column = getattr(WarehouseItem, sort_by)
            else:
                sort_column = WarehouseItem.name
            
            if sort_order == 'desc':
                query = query.order_by(sort_column.desc())
            else:
                query = query.order_by(sort_column.asc())
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}")
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
            query = query.order_by(WarehouseItem.name.asc())
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        try:
            total_count = query.count()
            print(f"üìà –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_count}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            total_count = 0
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        try:
            pagination = query.paginate(
                page=page,
                per_page=per_page,
                error_out=False
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {str(e)}'}), 500
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Å–ª–æ–≤–∞—Ä–∏
        items_data = []
        for item in pagination.items:
            try:
                item_dict = item.to_dict(include_categories=True)
                items_data.append(item_dict)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {item.id}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                items_data.append({
                    'id': item.id,
                    'name': item.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                    'current_quantity': item.current_quantity or 0,
                    'unit': item.unit or '—à—Ç',
                    'status': item.status or 'active',
                    'categories': [],
                    'category_names': []
                })
        
        result = {
            'items': items_data,
            'pagination': {
                'page': pagination.page,
                'pages': pagination.pages,
                'per_page': pagination.per_page,
                'total': pagination.total,
                'has_next': pagination.has_next,
                'has_prev': pagination.has_prev
            }
        }
        
        print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(items_data)} —Ç–æ–≤–∞—Ä–æ–≤")
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_items: {e}")
        import traceback
        traceback.print_exc()
        
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}',
            'items': [],
            'pagination': {
                'page': 1,
                'pages': 1,
                'per_page': per_page,
                'total': 0,
                'has_next': False,
                'has_prev': False
            }
        }), 500


@warehouse_bp.route('/items/<int:item_id>', methods=['GET'])
@jwt_required()
def get_item(item_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    try:
        item = WarehouseItem.query.get_or_404(item_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–æ–≤–∞—Ä–æ–º
        recent_operations = WarehouseOperation.query.filter(
            WarehouseOperation.item_id == item_id
        ).order_by(desc(WarehouseOperation.created_at)).limit(10).all()
        
        return jsonify({
            'item': item.to_dict(),
            'recent_operations': [op.to_dict() for op in recent_operations]
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}'}), 500


@warehouse_bp.route('/items/<int:item_id>', methods=['PUT'])
@jwt_required()
def update_item(item_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        item = WarehouseItem.query.get_or_404(item_id)
        data = request.get_json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
        if data.get('barcode') and data['barcode'] != item.barcode:
            existing_item = WarehouseItem.query.filter(
                WarehouseItem.barcode == data['barcode'],
                WarehouseItem.id != item_id
            ).first()
            if existing_item:
                return jsonify({'error': '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU
        if data.get('sku') and data['sku'] != item.sku:
            existing_item = WarehouseItem.query.filter(
                WarehouseItem.sku == data['sku'],
                WarehouseItem.id != item_id
            ).first()
            if existing_item:
                return jsonify({'error': '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞ (–∏—Å–∫–ª—é—á–∞–µ–º category_id - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        for field in ['name', 'barcode', 'sku', 'description', 'unit', 
                     'min_quantity', 'max_quantity', 'cost_price', 'status']:
            if field in data:
                setattr(item, field, data[field])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if any(key in data for key in ['category_ids', 'selectedCategories', 'category_names']):
            category_ids = []
            
            if data.get('category_ids'):
                category_ids.extend(data['category_ids'])
            
            if data.get('selectedCategories'):
                for category_name in data['selectedCategories']:
                    if category_name and category_name.strip():
                        category = WarehouseCategory.find_or_create_by_name(
                            name=category_name.strip()
                        )
                        category_ids.append(category.id)
            
            if data.get('category_names'):
                for category_name in data['category_names']:
                    if category_name and category_name.strip():
                        category = WarehouseCategory.find_or_create_by_name(
                            name=category_name.strip()
                        )
                        category_ids.append(category.id)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_ids = list(set(category_ids))
            if category_ids:
                item.set_categories(category_ids)
        
        item.updated_at = datetime.utcnow()
        db.session.commit()
        
        return jsonify({
            'message': '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            'item': item.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}'}), 500


@warehouse_bp.route('/items/<int:item_id>', methods=['DELETE'])
@jwt_required()
def delete_item(item_id):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"""
    try:
        item = WarehouseItem.query.get_or_404(item_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å—Ç–∞—Ç–∫–∏
        if item.current_quantity > 0:
            return jsonify({'error': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ'}), 400
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –≤–º–µ—Å—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        item.status = 'deleted'
        item.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({'message': '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}'}), 500


@warehouse_bp.route('/items/search', methods=['GET'])
@jwt_required()
def search_items():
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        query = request.args.get('q', '').strip()
        limit = min(request.args.get('limit', 10, type=int), 50)
        category_ids = request.args.getlist('category_ids')
        category_id = request.args.get('category_id', type=int)
        
        if not query:
            return jsonify({'items': []})
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º category_ids
        if category_id:
            category_ids.append(str(category_id))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ integers
        try:
            category_ids = [int(cid) for cid in category_ids if cid and str(cid).isdigit()]
        except (ValueError, TypeError):
            category_ids = []
        
        from sqlalchemy import func

        search_filter = f"%{query}%"
        search_query = WarehouseItem.query.filter(
            WarehouseItem.status == 'active'
        ).filter(
            or_(
                func.lower(WarehouseItem.name).like(func.lower(search_filter)),
                func.lower(WarehouseItem.barcode).like(func.lower(search_filter)),
                func.lower(WarehouseItem.sku).like(func.lower(search_filter)),
                func.lower(WarehouseItem.description).like(func.lower(search_filter))
            )
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if category_ids:
            categories = WarehouseCategory.query.filter(WarehouseCategory.id.in_(category_ids)).all()
            all_category_ids = set()
            for category in categories:
                all_category_ids.add(category.id)
                all_category_ids.update(category.get_all_child_ids())

        
        items = search_query.limit(limit).all()
        
        result_items = []
        for item in items:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
                categories = item.get_categories()
                category_names = [cat.name for cat in categories] if categories else []
                
                result_items.append({
                    'id': item.id,
                    'name': item.name,
                    'barcode': item.barcode,
                    'sku': item.sku,
                    'current_quantity': item.current_quantity,
                    'available_quantity': item.current_quantity - (item.reserved_quantity or 0),
                    'unit': item.unit,
                    'category_names': category_names
                })
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item.id} –≤ –ø–æ–∏—Å–∫–µ: {e}")
                continue
        
        return jsonify({'items': result_items})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}'}), 500


# ============ –û–°–¢–ê–¢–ö–ò ============

@warehouse_bp.route('/stock', methods=['GET'])
@jwt_required()
def get_stock():
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        page = request.args.get('page', 1, type=int)
        per_page = min(request.args.get('per_page', 50, type=int), 200)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_ids = request.args.getlist('category_ids')
        category_id = request.args.get('category_id', type=int)
        
        search = request.args.get('search', '').strip()
        stock_filter = request.args.get('stock_filter')  # low, out, normal, overstocked, all
        sort_by = request.args.get('sort_by', 'name')
        sort_order = request.args.get('sort_order', 'asc')
        
        print(f"üì¶ GET /stock - params: category_ids={category_ids}, category_id={category_id}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º category_ids
        if category_id:
            category_ids.append(str(category_id))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ integers
        try:
            category_ids = [int(cid) for cid in category_ids if cid and str(cid).isdigit()]
        except (ValueError, TypeError):
            category_ids = []
        
        query = WarehouseItem.query.filter(WarehouseItem.status == 'active')
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —á–µ—Ä–µ–∑ many-to-many —Å–≤—è–∑—å
        if category_ids:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            all_category_ids = []
            for cat_id in category_ids:
                all_category_ids.append(cat_id)
                category = WarehouseCategory.query.get(cat_id)
                if category:
                    all_category_ids.extend(category.get_all_child_ids())
            
            all_category_ids = list(set(all_category_ids))
            query = query.join(WarehouseItemCategory).filter(
                WarehouseItemCategory.category_id.in_(all_category_ids)
            ).distinct()
        
        if search:
            search_filter = f"%{search}%"
            query = query.filter(
                or_(
                    WarehouseItem.name.ilike(search_filter),
                    WarehouseItem.barcode.ilike(search_filter),
                    WarehouseItem.sku.ilike(search_filter)
                )
            )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
        if stock_filter == 'low':
            query = query.filter(
                and_(
                    WarehouseItem.current_quantity > 0,
                    WarehouseItem.current_quantity <= WarehouseItem.min_quantity
                )
            )
        elif stock_filter == 'out':
            query = query.filter(WarehouseItem.current_quantity == 0)
        elif stock_filter == 'overstocked':
            query = query.filter(WarehouseItem.current_quantity > WarehouseItem.max_quantity)
        elif stock_filter == 'normal':
            query = query.filter(
                and_(
                    WarehouseItem.current_quantity > WarehouseItem.min_quantity,
                    WarehouseItem.current_quantity <= WarehouseItem.max_quantity
                )
            )
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if sort_by == 'quantity':
            sort_column = WarehouseItem.current_quantity
        elif sort_by == 'value':
            sort_column = WarehouseItem.current_quantity * WarehouseItem.cost_price
        elif hasattr(WarehouseItem, sort_by):
            sort_column = getattr(WarehouseItem, sort_by)
        else:
            sort_column = WarehouseItem.name
        
        if sort_order == 'desc':
            query = query.order_by(sort_column.desc())
        else:
            query = query.order_by(sort_column.asc())
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination = query.paginate(
            page=page,
            per_page=per_page,
            error_out=False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –ø–æ–ª—è
        items_data = []
        for item in pagination.items:
            try:
                item_dict = item.to_dict(include_categories=True)
                item_dict['total_value'] = item.current_quantity * (item.cost_price or 0)
                items_data.append(item_dict)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item.id} –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö: {e}")
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                items_data.append({
                    'id': item.id,
                    'name': item.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                    'current_quantity': item.current_quantity or 0,
                    'unit': item.unit or '—à—Ç',
                    'cost_price': item.cost_price or 0,
                    'total_value': (item.current_quantity or 0) * (item.cost_price or 0),
                    'categories': [],
                    'category_names': []
                })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–π –≤—ã–±–æ—Ä–∫–µ
        total_items = pagination.total
        total_value = sum(item['total_value'] for item in items_data)
        
        return jsonify({
            'items': items_data,
            'pagination': {
                'page': page,
                'pages': pagination.pages,
                'per_page': per_page,
                'total': pagination.total,
                'has_next': pagination.has_next,
                'has_prev': pagination.has_prev
            },
            'summary': {
                'total_items': total_items,
                'total_value': total_value
            }
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ get_stock: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {str(e)}'}), 500


# ============ –û–ü–ï–†–ê–¶–ò–ò ============

@warehouse_bp.route('/operations', methods=['GET'])
@jwt_required()
def get_operations():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    try:
        page = request.args.get('page', 1, type=int)
        per_page = min(request.args.get('per_page', 20, type=int), 100)
        item_id = request.args.get('item_id', type=int)
        operation_type = request.args.get('operation_type')
        user_id = request.args.get('user_id', type=int)
        date_from = request.args.get('date_from')
        date_to = request.args.get('date_to')
        search = request.args.get('search', '').strip()
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_ids = request.args.getlist('category_ids')
        category_id = request.args.get('category_id', type=int)
        
        if category_id:
            category_ids.append(str(category_id))
        
        try:
            category_ids = [int(cid) for cid in category_ids if cid and str(cid).isdigit()]
        except (ValueError, TypeError):
            category_ids = []
        
        query = WarehouseOperation.query
        
        # –§–∏–ª—å—Ç—Ä—ã
        if item_id:
            query = query.filter(WarehouseOperation.item_id == item_id)
        
        if operation_type:
            query = query.filter(WarehouseOperation.operation_type == operation_type)
        
        if user_id:
            query = query.filter(WarehouseOperation.user_id == user_id)
        
        if date_from:
            try:
                date_from_obj = datetime.strptime(date_from, '%Y-%m-%d')
                query = query.filter(WarehouseOperation.created_at >= date_from_obj)
            except ValueError:
                return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã date_from'}), 400
        
        if date_to:
            try:
                date_to_obj = datetime.strptime(date_to, '%Y-%m-%d') + timedelta(days=1)
                query = query.filter(WarehouseOperation.created_at < date_to_obj)
            except ValueError:
                return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã date_to'}), 400
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤
        if category_ids:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            all_category_ids = []
            for cat_id in category_ids:
                all_category_ids.append(cat_id)
                category = WarehouseCategory.query.get(cat_id)
                if category:
                    all_category_ids.extend(category.get_all_child_ids())
            
            all_category_ids = list(set(all_category_ids))
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            item_ids_in_categories = db.session.query(WarehouseItemCategory.item_id).filter(
                WarehouseItemCategory.category_id.in_(all_category_ids)
            ).distinct().subquery()
            
            query = query.filter(WarehouseOperation.item_id.in_(item_ids_in_categories))
        
        if search:
            search_filter = f"%{search}%"
            query = query.join(WarehouseItem).filter(
                or_(
                    WarehouseItem.name.ilike(search_filter),
                    WarehouseItem.barcode.ilike(search_filter),
                    WarehouseOperation.reason.ilike(search_filter),
                    WarehouseOperation.comment.ilike(search_filter)
                )
            )
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
        query = query.order_by(desc(WarehouseOperation.created_at))
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination = query.paginate(
            page=page,
            per_page=per_page,
            error_out=False
        )
        
        return jsonify({
            'operations': [op.to_dict() for op in pagination.items],
            'pagination': {
                'page': page,
                'pages': pagination.pages,
                'per_page': per_page,
                'total': pagination.total,
                'has_next': pagination.has_next,
                'has_prev': pagination.has_prev
            }
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π: {str(e)}'}), 500


@warehouse_bp.route('/operations/add-stock', methods=['POST'])
@jwt_required()
def add_stock():
    """–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥"""
    try:
        data = request.get_json()
        current_user_id = get_jwt_identity()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not data.get('item_id') or not data.get('quantity'):
            return jsonify({'error': '–¢–æ–≤–∞—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        quantity = int(data['quantity'])
        if quantity <= 0:
            return jsonify({'error': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º'}), 400
        
        item = WarehouseItem.query.get_or_404(data['item_id'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        old_quantity = item.current_quantity
        new_quantity = old_quantity + quantity
        
        operation = item.update_quantity(
            new_quantity=new_quantity,
            operation_type='add',
            reason=data.get('reason', '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ'),
            user_id=current_user_id
        )
        
        operation.comment = data.get('comment', '')
        operation.document_number = data.get('document_number', '')
        operation.ip_address = get_client_ip(request)
        
        db.session.commit()
        
        return jsonify({
            'message': f'–î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} {item.unit} —Ç–æ–≤–∞—Ä–∞ "{item.name}"',
            'operation': operation.to_dict(),
            'item': item.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}'}), 500


@warehouse_bp.route('/operations/remove-stock', methods=['POST'])
@jwt_required()
def remove_stock():
    """–°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ —Å–∫–ª–∞–¥–∞"""
    try:
        data = request.get_json()
        current_user_id = get_jwt_identity()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not data.get('item_id') or not data.get('quantity'):
            return jsonify({'error': '–¢–æ–≤–∞—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        quantity = int(data['quantity'])
        if quantity <= 0:
            return jsonify({'error': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º'}), 400
        
        item = WarehouseItem.query.get_or_404(data['item_id'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤
        available_quantity = item.current_quantity - (item.reserved_quantity or 0)
        if quantity > available_quantity:
            return jsonify({
                'error': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {available_quantity} {item.unit}'
            }), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        old_quantity = item.current_quantity
        new_quantity = old_quantity - quantity
        
        operation = item.update_quantity(
            new_quantity=new_quantity,
            operation_type='remove',
            reason=data.get('reason', '–°–ø–∏—Å–∞–Ω–∏–µ'),
            user_id=current_user_id
        )
        
        operation.comment = data.get('comment', '')
        operation.document_number = data.get('document_number', '')
        operation.ip_address = get_client_ip(request)
        
        db.session.commit()
        
        return jsonify({
            'message': f'–°–ø–∏—Å–∞–Ω–æ {quantity} {item.unit} —Ç–æ–≤–∞—Ä–∞ "{item.name}"',
            'operation': operation.to_dict(),
            'item': item.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}'}), 500


# ============ –£–¢–ò–õ–ò–¢–´ –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò –¢–û–í–ê–†–û–í ============

@warehouse_bp.route('/items/<int:item_id>/categories', methods=['GET'])
@jwt_required()
def get_item_categories(item_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    try:
        item = WarehouseItem.query.get_or_404(item_id)
        categories = item.get_categories()
        
        return jsonify({
            'item_id': item_id,
            'categories': [cat.to_dict() for cat in categories]
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–∞: {str(e)}'}), 500


@warehouse_bp.route('/items/<int:item_id>/categories', methods=['POST'])
@jwt_required()
def add_item_categories(item_id):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ —Ç–æ–≤–∞—Ä—É"""
    try:
        item = WarehouseItem.query.get_or_404(item_id)
        data = request.get_json()
        
        category_ids = data.get('category_ids', [])
        if not category_ids:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}), 400
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category_id in category_ids:
            item.add_category(category_id)
        
        db.session.commit()
        
        return jsonify({
            'message': f'–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ —Ç–æ–≤–∞—Ä—É "{item.name}"',
            'item': item.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}'}), 500


@warehouse_bp.route('/items/<int:item_id>/categories', methods=['PUT'])
@jwt_required()
def set_item_categories(item_id):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)"""
    try:
        item = WarehouseItem.query.get_or_404(item_id)
        data = request.get_json()
        
        category_ids = data.get('category_ids', [])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
        item.set_categories(category_ids)
        db.session.commit()
        
        return jsonify({
            'message': f'–û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ "{item.name}"',
            'item': item.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}'}), 500


@warehouse_bp.route('/items/<int:item_id>/categories', methods=['DELETE'])
@jwt_required()
def remove_item_categories(item_id):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É —Ç–æ–≤–∞—Ä–∞"""
    try:
        item = WarehouseItem.query.get_or_404(item_id)
        data = request.get_json()
        
        category_ids = data.get('category_ids', [])
        if not category_ids:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'}), 400
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category_id in category_ids:
            item.remove_category(category_id)
        
        db.session.commit()
        
        return jsonify({
            'message': f'–£–¥–∞–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É —Ç–æ–≤–∞—Ä–∞ "{item.name}"',
            'item': item.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}'}), 500


# ============ –ö–û–ù–°–¢–ê–ù–¢–´ –ò –£–¢–ò–õ–ò–¢–´ ============

@warehouse_bp.route('/barcode/info', methods=['POST'])
@jwt_required()
def get_barcode_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É"""
    try:
        data = request.get_json()
        barcode = data.get('barcode', '').strip()
        
        if not barcode:
            return jsonify({'error': '–®—Ç—Ä–∏—Ö-–∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
        existing_item = WarehouseItem.query.filter(
            WarehouseItem.barcode == barcode
        ).first()
        
        if existing_item:
            return jsonify({
                'success' : True,
                'found_in_database': True,
                'item': existing_item.to_dict(),
                'message': '–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        product_data = get_product_from_service_online(barcode)
        if not product_data:
            return jsonify({
                'success' : False,
                'found_in_database': False,
                'barcode': barcode,
                'message': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ'
            }), 404
        
        import time
        time.sleep(0.5)
        
        return jsonify({
            'success' : True,
            'found_in_database': False,
            'external_data': product_data,
            'barcode': barcode,
            'message': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞'
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}'}), 500


@warehouse_bp.route('/constants', methods=['GET'])
@jwt_required()
def get_constants():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è UI"""
    try:
        from models import OPERATION_TYPES, REMOVAL_REASONS, ADDITION_REASONS
        
        return jsonify({
            'operation_types': OPERATION_TYPES,
            'removal_reasons': REMOVAL_REASONS,
            'addition_reasons': ADDITION_REASONS,
            'stock_filters': {
                'all': '–í—Å–µ —Ç–æ–≤–∞—Ä—ã',
                'normal': '–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏',
                'low': '–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏',
                'out': '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏',
                'overstocked': '–ò–∑–±—ã—Ç–æ–∫'
            },
            'item_statuses': {
                'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
                'inactive': '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π',
                'discontinued': '–°–Ω—è—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'
            }
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç: {str(e)}'}), 500


# ============ –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• ============

@warehouse_bp.route('/export/stock', methods=['GET'])
@jwt_required()
def export_stock():
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ CSV —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_ids = request.args.getlist('category_ids')
        category_id = request.args.get('category_id', type=int)
        stock_filter = request.args.get('stock_filter')
        
        if category_id:
            category_ids.append(str(category_id))
        
        try:
            category_ids = [int(cid) for cid in category_ids if cid and str(cid).isdigit()]
        except (ValueError, TypeError):
            category_ids = []
        
        query = WarehouseItem.query.filter(WarehouseItem.status == 'active')
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —á–µ—Ä–µ–∑ many-to-many —Å–≤—è–∑—å
        if category_ids:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            all_category_ids = []
            for cat_id in category_ids:
                all_category_ids.append(cat_id)
                category = WarehouseCategory.query.get(cat_id)
                if category:
                    all_category_ids.extend(category.get_all_child_ids())
            
            all_category_ids = list(set(all_category_ids))
            query = query.join(WarehouseItemCategory).filter(
                WarehouseItemCategory.category_id.in_(all_category_ids)
            ).distinct()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
        if stock_filter == 'low':
            query = query.filter(
                and_(
                    WarehouseItem.current_quantity > 0,
                    WarehouseItem.current_quantity <= WarehouseItem.min_quantity
                )
            )
        elif stock_filter == 'out':
            query = query.filter(WarehouseItem.current_quantity == 0)
        elif stock_filter == 'overstocked':
            query = query.filter(WarehouseItem.current_quantity > WarehouseItem.max_quantity)
        
        items = query.order_by(WarehouseItem.name).all()
        
        # –°–æ–∑–¥–∞–µ–º CSV
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            '–ù–∞–∑–≤–∞–Ω–∏–µ', '–®—Ç—Ä–∏—Ö-–∫–æ–¥', '–ê—Ä—Ç–∏–∫—É–ª', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ï–¥–∏–Ω–∏—Ü–∞',
            '–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ', '–î–æ—Å—Ç—É–ø–Ω–æ',
            '–ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å',
            '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—Ç–∫–æ–≤', '–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è'
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for item in items:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
                categories = item.get_categories()
                category_names = [cat.name for cat in categories] if categories else ['–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏']
                
                available_qty = item.current_quantity - (item.reserved_quantity or 0)
                total_value = item.current_quantity * (float(item.cost_price) if item.cost_price else 0)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—Ç–∫–æ–≤
                if item.current_quantity == 0:
                    stock_status = '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'
                elif item.current_quantity <= item.min_quantity:
                    stock_status = '–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫'
                elif item.current_quantity > item.max_quantity:
                    stock_status = '–ò–∑–±—ã—Ç–æ–∫'
                else:
                    stock_status = '–ù–æ—Ä–º–∞–ª—å–Ω–æ'
                
                writer.writerow([
                    item.name,
                    item.barcode or '',
                    item.sku or '',
                    ', '.join(category_names),  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                    item.unit,
                    item.current_quantity,
                    item.reserved_quantity or 0,
                    available_qty,
                    item.min_quantity,
                    item.max_quantity,
                    float(item.cost_price) if item.cost_price else 0,
                    total_value,
                    stock_status,
                    item.last_operation_at.strftime('%Y-%m-%d %H:%M:%S') if item.last_operation_at else ''
                ])
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–∞ {item.id}: {e}")
                continue
        
        output.seek(0)
        
        return Response(
            output.getvalue(),
            mimetype='text/csv',
            headers={
                'Content-Disposition': f'attachment; filename=warehouse_stock_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
            }
        )
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: {str(e)}'}), 500


# ============ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –û–¢–õ–ê–î–ö–ê ============

@warehouse_bp.route('/debug/status', methods=['GET'])
@jwt_required()
def warehouse_debug_status():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–ª–∞–¥–∞"""
    try:
        status = {
            'database_connection': True,
            'tables_exist': {},
            'data_counts': {},
            'issues': [],
            'suggestions': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –¥–∞–Ω–Ω—ã—Ö
        tables_to_check = [
            ('warehouse_categories', WarehouseCategory),
            ('warehouse_items', WarehouseItem), 
            ('warehouse_item_categories', WarehouseItemCategory),
            ('warehouse_operations', WarehouseOperation)
        ]
        
        for table_name, model_class in tables_to_check:
            try:
                count = model_class.query.count()
                status['tables_exist'][table_name] = True
                status['data_counts'][table_name] = count
            except Exception as e:
                status['tables_exist'][table_name] = False
                status['issues'].append(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        try:
            # –¢–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            items_without_categories = db.session.query(WarehouseItem).filter(
                ~WarehouseItem.id.in_(
                    db.session.query(WarehouseItemCategory.item_id)
                )
            ).count()
            
            if items_without_categories > 0:
                status['issues'].append(f"–ù–∞–π–¥–µ–Ω–æ {items_without_categories} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                status['suggestions'].append("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: flask migrate-warehouse")
            
            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–≤—è–∑–∏
            orphaned_relations = db.session.query(WarehouseItemCategory).filter(
                ~WarehouseItemCategory.item_id.in_(
                    db.session.query(WarehouseItem.id)
                ) | ~WarehouseItemCategory.category_id.in_(
                    db.session.query(WarehouseCategory.id)
                )
            ).count()
            
            if orphaned_relations > 0:
                status['issues'].append(f"–ù–∞–π–¥–µ–Ω–æ {orphaned_relations} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π —Ç–æ–≤–∞—Ä-–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                status['suggestions'].append("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: flask fix-warehouse")
                
        except Exception as e:
            status['issues'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if len(status['issues']) == 0:
            status['overall_status'] = 'healthy'
            status['message'] = '–°–∫–ª–∞–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
        elif len(status['issues']) <= 2:
            status['overall_status'] = 'warning'
            status['message'] = '–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã'
        else:
            status['overall_status'] = 'error'
            status['message'] = '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã'
        
        return jsonify(status)
        
    except Exception as e:
        return jsonify({
            'database_connection': False,
            'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}',
            'overall_status': 'critical'
        }), 500


@warehouse_bp.route('/debug/fix', methods=['POST'])
@jwt_required()
def warehouse_debug_fix():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å–∫–ª–∞–¥–∞"""
    try:
        results = {
            'fixed_issues': [],
            'remaining_issues': [],
            'actions_taken': []
        }
        
        # 1. –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        try:
            db.create_all()
            results['actions_taken'].append('–ü—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã')
        except Exception as e:
            results['remaining_issues'].append(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}')
        
        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            from models import migrate_existing_items_to_multiple_categories
            migrate_existing_items_to_multiple_categories()
            results['actions_taken'].append('–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
        except Exception as e:
            results['remaining_issues'].append(f'–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}')
        
        # 3. –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–≤—è–∑–∏
        try:
            orphaned_relations = db.session.query(WarehouseItemCategory).filter(
                ~WarehouseItemCategory.item_id.in_(
                    db.session.query(WarehouseItem.id)
                ) | ~WarehouseItemCategory.category_id.in_(
                    db.session.query(WarehouseCategory.id)
                )
            ).all()
            
            for relation in orphaned_relations:
                db.session.delete(relation)
            
            if orphaned_relations:
                db.session.commit()
                results['fixed_issues'].append(f'–£–¥–∞–ª–µ–Ω–æ {len(orphaned_relations)} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π')
                results['actions_taken'].append('–û—á–∏—â–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–≤—è–∑–∏ —Ç–æ–≤–∞—Ä-–∫–∞—Ç–µ–≥–æ—Ä–∏—è')
            
        except Exception as e:
            results['remaining_issues'].append(f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–≤—è–∑–µ–π: {e}')
        
        # 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            if WarehouseCategory.query.count() == 0:
                from models import create_sample_warehouse_data
                create_sample_warehouse_data()
                results['actions_taken'].append('–°–æ–∑–¥–∞–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞')
        except Exception as e:
            results['remaining_issues'].append(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}')
        
        return jsonify(results)
        
    except Exception as e:
        return jsonify({
            'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {str(e)}',
            'fixed_issues': [],
            'remaining_issues': [str(e)]
        }), 500


# ============ –ê–ù–ê–õ–ò–¢–ò–ö–ê ============

@warehouse_bp.route('/analytics/stock-movement', methods=['GET'])
@jwt_required()
def get_stock_movement_analytics():
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    try:
        days = request.args.get('days', 30, type=int)
        category_ids = request.args.getlist('category_ids')
        category_id = request.args.get('category_id', type=int)
        
        if category_id:
            category_ids.append(str(category_id))
        
        try:
            category_ids = [int(cid) for cid in category_ids if cid and str(cid).isdigit()]
        except (ValueError, TypeError):
            category_ids = []
        
        start_date = datetime.utcnow() - timedelta(days=days)
        
        query = WarehouseOperation.query.filter(
            WarehouseOperation.created_at >= start_date
        )
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤
        if category_ids:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            all_category_ids = []
            for cat_id in category_ids:
                all_category_ids.append(cat_id)
                category = WarehouseCategory.query.get(cat_id)
                if category:
                    all_category_ids.extend(category.get_all_child_ids())
            
            all_category_ids = list(set(all_category_ids))
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            item_ids_in_categories = db.session.query(WarehouseItemCategory.item_id).filter(
                WarehouseItemCategory.category_id.in_(all_category_ids)
            ).distinct().subquery()
            
            query = query.filter(WarehouseOperation.item_id.in_(item_ids_in_categories))
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
        daily_stats = db.session.query(
            func.date(WarehouseOperation.created_at).label('date'),
            WarehouseOperation.operation_type,
            func.count(WarehouseOperation.id).label('count'),
            func.sum(func.abs(WarehouseOperation.quantity_change)).label('quantity')
        ).filter(
            WarehouseOperation.created_at >= start_date
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∫ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ
        if category_ids:
            daily_stats = daily_stats.filter(WarehouseOperation.item_id.in_(item_ids_in_categories))
        
        daily_stats = daily_stats.group_by(
            func.date(WarehouseOperation.created_at),
            WarehouseOperation.operation_type
        ).all()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        chart_data = {}
        for stat in daily_stats:
            date_str = stat.date.isoformat()
            if date_str not in chart_data:
                chart_data[date_str] = {}
            chart_data[date_str][stat.operation_type] = {
                'count': stat.count,
                'quantity': int(stat.quantity) if stat.quantity else 0
            }
        
        # –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        top_items_query = db.session.query(
            WarehouseItem.id,
            WarehouseItem.name,
            func.count(WarehouseOperation.id).label('operation_count'),
            func.sum(func.abs(WarehouseOperation.quantity_change)).label('total_quantity')
        ).join(WarehouseOperation).filter(
            WarehouseOperation.created_at >= start_date
        )
        
        if category_ids:
            top_items_query = top_items_query.filter(WarehouseItem.id.in_(item_ids_in_categories))
        
        top_items = top_items_query.group_by(WarehouseItem.id).order_by(
            desc(func.count(WarehouseOperation.id))
        ).limit(10).all()
        
        return jsonify({
            'period_days': days,
            'category_filter': category_ids,
            'daily_movement': chart_data,
            'top_active_items': [
                {
                    'id': item_id,
                    'name': name,
                    'operation_count': count,
                    'total_quantity': int(quantity) if quantity else 0
                }
                for item_id, name, count, quantity in top_items
            ]
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}'}), 500


@warehouse_bp.route('/analytics/low-stock-alerts', methods=['GET'])
@jwt_required()
def get_low_stock_alerts():
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    try:
        category_ids = request.args.getlist('category_ids')
        category_id = request.args.get('category_id', type=int)
        
        if category_id:
            category_ids.append(str(category_id))
        
        try:
            category_ids = [int(cid) for cid in category_ids if cid and str(cid).isdigit()]
        except (ValueError, TypeError):
            category_ids = []
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        base_filter = [WarehouseItem.status == 'active']
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        if category_ids:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            all_category_ids = []
            for cat_id in category_ids:
                all_category_ids.append(cat_id)
                category = WarehouseCategory.query.get(cat_id)
                if category:
                    all_category_ids.extend(category.get_all_child_ids())
            
            all_category_ids = list(set(all_category_ids))
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_filter = WarehouseItem.id.in_(
                db.session.query(WarehouseItemCategory.item_id).filter(
                    WarehouseItemCategory.category_id.in_(all_category_ids)
                )
            )
            base_filter.append(category_filter)
        
        # –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        low_stock_items = WarehouseItem.query.filter(
            and_(
                WarehouseItem.current_quantity <= WarehouseItem.min_quantity,
                WarehouseItem.current_quantity > 0,
                *base_filter
            )
        ).order_by(WarehouseItem.current_quantity.asc()).all()
        
        # –¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
        out_of_stock_items = WarehouseItem.query.filter(
            and_(
                WarehouseItem.current_quantity == 0,
                *base_filter
            )
        ).order_by(WarehouseItem.last_operation_at.desc()).all()
        
        # –¢–æ–≤–∞—Ä—ã —Å –∏–∑–±—ã—Ç–∫–æ–º
        overstocked_items = WarehouseItem.query.filter(
            and_(
                WarehouseItem.current_quantity > WarehouseItem.max_quantity,
                *base_filter
            )
        ).order_by(WarehouseItem.current_quantity.desc()).all()
        
        return jsonify({
            'category_filter': category_ids,
            'low_stock': [item.to_dict() for item in low_stock_items],
            'out_of_stock': [item.to_dict() for item in out_of_stock_items],
            'overstocked': [item.to_dict() for item in overstocked_items],
            'summary': {
                'low_stock_count': len(low_stock_items),
                'out_of_stock_count': len(out_of_stock_items),
                'overstocked_count': len(overstocked_items)
            }
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}'}), 500


# ============ –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò ============

@warehouse_bp.route('/operations/bulk-add', methods=['POST'])
@jwt_required()
def bulk_add_stock():
    """–ú–∞—Å—Å–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        data = request.get_json()
        current_user_id = get_jwt_identity()
        
        items_data = data.get('items', [])
        if not items_data:
            return jsonify({'error': '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        operations = []
        updated_items = []
        errors = []
        
        for item_data in items_data:
            try:
                item_id = item_data.get('item_id')
                quantity = int(item_data.get('quantity', 0))
                
                if not item_id or quantity <= 0:
                    errors.append(f'–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID {item_id}')
                    continue
                
                item = WarehouseItem.query.get(item_id)
                if not item:
                    errors.append(f'–¢–æ–≤–∞—Ä —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    continue
                
                old_quantity = item.current_quantity
                new_quantity = old_quantity + quantity
                
                operation = item.update_quantity(
                    new_quantity=new_quantity,
                    operation_type='add',
                    reason=item_data.get('reason', '–ú–∞—Å—Å–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ'),
                    user_id=current_user_id
                )
                
                operation.comment = item_data.get('comment', '')
                operation.document_number = data.get('document_number', '')
                operation.ip_address = get_client_ip(request)
                
                operations.append(operation)
                updated_items.append(item)
                
            except Exception as e:
                errors.append(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ID {item_data.get("item_id")}: {str(e)}')
        
        if operations:
            db.session.commit()
        
        return jsonify({
            'message': f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(operations)} —Ç–æ–≤–∞—Ä–æ–≤',
            'success_count': len(operations),
            'error_count': len(errors),
            'errors': errors,
            'operations': [op.to_dict() for op in operations]
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {str(e)}'}), 500


@warehouse_bp.route('/operations/bulk-remove', methods=['POST'])
@jwt_required()
def bulk_remove_stock():
    """–ú–∞—Å—Å–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        data = request.get_json()
        current_user_id = get_jwt_identity()
        
        items_data = data.get('items', [])
        if not items_data:
            return jsonify({'error': '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        operations = []
        updated_items = []
        errors = []
        
        for item_data in items_data:
            try:
                item_id = item_data.get('item_id')
                quantity = int(item_data.get('quantity', 0))
                
                if not item_id or quantity <= 0:
                    errors.append(f'–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID {item_id}')
                    continue
                
                item = WarehouseItem.query.get(item_id)
                if not item:
                    errors.append(f'–¢–æ–≤–∞—Ä —Å ID {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
                    continue
                
                available_quantity = item.current_quantity - (item.reserved_quantity or 0)
                if quantity > available_quantity:
                    errors.append(f'–¢–æ–≤–∞—Ä "{item.name}": –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ ({available_quantity} –¥–æ—Å—Ç—É–ø–Ω–æ)')
                    continue
                
                old_quantity = item.current_quantity
                new_quantity = old_quantity - quantity
                
                operation = item.update_quantity(
                    new_quantity=new_quantity,
                    operation_type='remove',
                    reason=item_data.get('reason', '–ú–∞—Å—Å–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ'),
                    user_id=current_user_id
                )
                
                operation.comment = item_data.get('comment', '')
                operation.document_number = data.get('document_number', '')
                operation.ip_address = get_client_ip(request)
                
                operations.append(operation)
                updated_items.append(item)
                
            except Exception as e:
                errors.append(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ID {item_data.get("item_id")}: {str(e)}')
        
        if operations:
            db.session.commit()
        
        return jsonify({
            'message': f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(operations)} —Ç–æ–≤–∞—Ä–æ–≤',
            'success_count': len(operations),
            'error_count': len(errors),
            'errors': errors,
            'operations': [op.to_dict() for op in operations]
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}'}), 500


# ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ============

@warehouse_bp.route('/categories/hierarchy', methods=['GET'])
@jwt_required()
def get_category_hierarchy():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_categories = WarehouseCategory.query.order_by(WarehouseCategory.name).all()
        
        # –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é
        def build_hierarchy(parent_id=None):
            children = []
            for category in all_categories:
                if category.parent_id == parent_id:
                    cat_data = category.to_dict()
                    cat_data['items_count'] = category.get_items_count(include_subcategories=True)
                    cat_data['children'] = build_hierarchy(category.id)
                    children.append(cat_data)
            return children
        
        hierarchy = build_hierarchy()
        
        return jsonify({
            'hierarchy': hierarchy,
            'total_categories': len(all_categories)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏: {str(e)}'}), 500


@warehouse_bp.route('/categories/<int:category_id>/path', methods=['GET'])
@jwt_required()
def get_category_path(category_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (breadcrumbs)"""
    try:
        category = WarehouseCategory.query.get_or_404(category_id)
        
        # –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –¥–æ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        path = []
        current = category
        
        while current:
            path.insert(0, {
                'id': current.id,
                'name': current.name,
                'color': current.color
            })
            current = current.parent
        
        return jsonify({
            'category_id': category_id,
            'path': path,
            'full_path': category.get_full_path()
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}'}), 500


@warehouse_bp.route('/items/by-categories', methods=['GET'])
@jwt_required()
def get_items_by_categories():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤–∫–ª—é—á–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
    try:
        category_ids = request.args.getlist('category_ids')
        include_subcategories = request.args.get('include_subcategories', 'true').lower() == 'true'
        status = request.args.get('status', 'active')
        
        if not category_ids:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}), 400
        
        try:
            category_ids = [int(cid) for cid in category_ids if cid and str(cid).isdigit()]
        except (ValueError, TypeError):
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π'}), 400
        
        # –†–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        all_category_ids = category_ids.copy()
        
        if include_subcategories:
            for cat_id in category_ids:
                category = WarehouseCategory.query.get(cat_id)
                if category:
                    all_category_ids.extend(category.get_all_child_ids())
        
        all_category_ids = list(set(all_category_ids))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        query = WarehouseItem.query.join(WarehouseItemCategory).filter(
            WarehouseItemCategory.category_id.in_(all_category_ids),
            WarehouseItem.status == status
        ).distinct()
        
        items = query.order_by(WarehouseItem.name).all()
        
        return jsonify({
            'category_ids': category_ids,
            'all_category_ids': all_category_ids,
            'include_subcategories': include_subcategories,
            'items': [item.to_dict() for item in items],
            'total_items': len(items)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {str(e)}'}), 500