import os
import logging
import asyncio
import json
from datetime import datetime
from flask import Flask, request, jsonify
from telegram import Bot
from telegram.ext import Application, CommandHandler
import threading
import time
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
    API_PORT = int(os.getenv('TELEGRAM_PORT', 5001))
    API_HOST = os.getenv('TELEGRAM_HOST', '0.0.0.0')

app = Flask(__name__)

class TelegramNotificationService:
    def __init__(self):
        self.bot = None
        self.application = None
        self.is_running = False
        self.loop = None
        self.chat_ids = set()  # –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ chat_id –≤ –ø–∞–º—è—Ç–∏
        
    async def initialize_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        try:
            if Config.TELEGRAM_BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
                logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                return False
                
            self.bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É /start
            self.application.add_handler(CommandHandler("start", self.start_command))
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling"""
        try:
            self.loop = asyncio.get_event_loop()
            
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
            success = await self.initialize_bot()
            
            if not success:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
                return
            
            self.is_running = True
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.initialize()
            await self.application.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.application.updater.start_polling(
                poll_interval=1.0,
                timeout=10,
                read_timeout=2,
                write_timeout=2,
                connect_timeout=2,
                pool_timeout=1
            )
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            logger.info("üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ Telegram!")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
            while self.is_running:
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ polling: {e}")
        finally:
            await self.stop_polling()
    
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        try:
            self.is_running = False
            logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            
            if self.application:
                if self.application.updater and self.application.updater.running:
                    await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
                
            logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    def run_async_in_thread(self, coro):
        """–ó–∞–ø—É—Å–∫ –∫–æ—Ä—É—Ç–∏–Ω—ã –≤ event loop –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        if self.loop and self.loop.is_running():
            future = asyncio.run_coroutine_threadsafe(coro, self.loop)
            try:
                return future.result(timeout=10)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è async –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
                return None
        else:
            logger.error("‚ùå Event loop –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
    
    async def start_command(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            user = update.effective_user
            chat_id = update.effective_chat.id
            
            # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ –Ω–∞—à —Å–ø–∏—Å–æ–∫
            self.chat_ids.add(chat_id)
            
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (@{user.username}) Chat ID: {chat_id}")
            
            welcome_text = f"""üé≠ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

üìã **–í–∞—à Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**
```
{chat_id}
```

üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç."""
            
            await update.message.reply_text(welcome_text, parse_mode='Markdown')
            logger.info(f"‚úÖ Chat ID {chat_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_command: {e}")
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass
    
    async def send_notification(self, chat_id, booking):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã"""
        message_text = f"""
üéâ **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï**

üë§ **–ö–ª–∏–µ–Ω—Ç:** {booking['name']}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {booking['phone']}
üìß **Email:** {booking['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìã **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**
    **–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:** {datetime.strptime(booking['event_date'], '%Y-%m-%d').strftime('%d.%m.%Y') if booking['event_date'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
    **–í—Ä–µ–º—è:** {datetime.strptime(booking['event_time'], '%H:%M:%S').strftime('%H:%M') if booking['event_time'] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
    **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:** {booking['guests_count'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:**
    {booking['message'] or '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ'}

‚è∞ **–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:** 
    {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}
"""

        try:
            if not self.bot:
                logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            try:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    parse_mode='Markdown'
                )
                sent_count += 1
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            
            return sent_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_notification: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = TelegramNotificationService()

# Flask API –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/send-notification', methods=['POST'])
def send_notification():
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        data = request.get_json()
        print(data)
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        chat_id = data.get('chat_id', [])
        booking = data.get('booking', dict())
        
        if not chat_id:
            return jsonify({'error': '–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏'}), 400
        
        if not booking:
            return jsonify({'error': '–ó–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π'}), 400
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if notification_service.bot and notification_service.is_running:
            result = notification_service.run_async_in_thread(
                notification_service.send_notification(chat_id, booking)
            )
            
            if result:
                return jsonify({
                    'status': 'sent',
                    'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
                })
            else:
                return jsonify({
                    'status': 'not_sent',
                    'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
                })
        else:
            return jsonify({
                'status': 'not_sent',
                'message': '–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω'
            })
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/get-chat-ids', methods=['GET'])
def get_chat_ids():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö chat_id"""
    try:
        return jsonify({
            'chat_ids': list(notification_service.chat_ids),
            'count': len(notification_service.chat_ids)
        })
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_ids: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        bot_status = notification_service.bot is not None
        polling_status = notification_service.is_running
        
        return jsonify({
            'status': 'healthy',
            'bot': 'initialized' if bot_status else 'not_initialized',
            'polling': 'running' if polling_status else 'stopped',
            'known_chats': len(notification_service.chat_ids),
            'timestamp': datetime.utcnow().isoformat()
        })
    
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'error': str(e),
            'timestamp': datetime.utcnow().isoformat()
        }), 500


@app.route('/bot-info', methods=['GET'])
def bot_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    try:
        if notification_service.bot and notification_service.is_running:
            bot_data = notification_service.run_async_in_thread(
                notification_service.bot.get_me()
            )
            
            if bot_data:
                return jsonify({
                    'bot_id': bot_data.id,
                    'username': bot_data.username,
                    'first_name': bot_data.first_name,
                    'status': 'active'
                })
            else:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ'}), 500
        else:
            return jsonify({'error': '–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω'}), 404
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ bot_info: {e}")
        return jsonify({'error': str(e)}), 500

def run_flask_api():
    """–ó–∞–ø—É—Å–∫ Flask API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ Flask API –Ω–∞ http://{Config.API_HOST}:{Config.API_PORT}")
        app.run(
            host=Config.API_HOST,
            port=Config.API_PORT,
            debug=False,
            use_reloader=False,
            threaded=True
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Flask API: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if Config.TELEGRAM_BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞!")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Telegram —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask_api, daemon=True)
    flask_thread.start()
    
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask
    time.sleep(2)
    logger.info("‚úÖ Flask API –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        loop.run_until_complete(notification_service.start_polling())
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        try:
            if notification_service.is_running:
                loop.run_until_complete(notification_service.stop_polling())
            loop.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

if __name__ == '__main__':
    main()
