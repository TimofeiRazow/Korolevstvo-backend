# models/__init__.py
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, timedelta
from werkzeug.security import generate_password_hash, check_password_hash
from sqlalchemy import func

db = SQLAlchemy()

class Admin(db.Model):
    __tablename__ = 'admins'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False)
    role = db.Column(db.String(50), default='admin')  # admin, manager, editor
    active = db.Column(db.Boolean, default=True)
    last_login = db.Column(db.DateTime)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    created_by = db.Column(db.Integer, db.ForeignKey('admins.id'))
    
    def set_password(self, password):
        """–•–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"""
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å"""
        return check_password_hash(self.password_hash, password)
    
    def update_last_login(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞"""
        self.last_login = datetime.utcnow()
        db.session.commit()
    
    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'email': self.email,
            'role': self.role,
            'active': self.active,
            'last_login': self.last_login.isoformat() if self.last_login else None,
            'created_at': self.created_at.isoformat()
        }
# models/service.py
class Service(db.Model):
    __tablename__ = 'services'
    
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    category = db.Column(db.String(50), nullable=False)
    duration = db.Column(db.String(50))
    min_guests = db.Column(db.String(50))
    rating = db.Column(db.Float, default=5.0)
    price = db.Column(db.String(50))
    price_description = db.Column(db.String(100))
    description = db.Column(db.Text)
    features = db.Column(db.JSON)  # –°–ø–∏—Å–æ–∫ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
    subcategories = db.Column(db.JSON)  # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    images = db.Column(db.JSON)  # –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    cover_image = db.Column(db.String(500))
    featured = db.Column(db.Boolean, default=False)
    tags = db.Column(db.JSON)  # –¢–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    packages = db.Column(db.JSON)  # –ü–∞–∫–µ—Ç—ã —É—Å–ª—É–≥
    status = db.Column(db.String(20), default='active')  # active, inactive, draft
    views_count = db.Column(db.Integer, default=0)  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    bookings_count = db.Column(db.Integer, default=0)  # –°—á–µ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self):
        return {
            'id': self.id,
            'title': self.title,
            'category': self.category,
            'duration': self.duration,
            'minGuests': self.min_guests,
            'rating': self.rating,
            'price': self.price,
            'priceDescription': self.price_description,
            'description': self.description,
            'features': self.features or [],
            'subcategories': self.subcategories or [],
            'images': self.images or [],
            'coverImage': self.cover_image,
            'featured': self.featured,
            'tags': self.tags or [],
            'packages': self.packages or [],
            'status': self.status,
            'viewsCount': self.views_count,
            'bookingsCount': self.bookings_count,
            'created': self.created_at.strftime('%Y-%m-%d') if self.created_at else None,
            'updated': self.updated_at.strftime('%Y-%m-%d') if self.updated_at else None
        }
    
    def update_from_dict(self, data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö"""
        self.title = data.get('title', self.title)
        self.category = data.get('category', self.category)
        self.duration = data.get('duration', self.duration)
        self.min_guests = data.get('minGuests', self.min_guests)
        self.rating = float(data.get('rating', self.rating))
        self.price = data.get('price', self.price)
        self.price_description = data.get('priceDescription', self.price_description)
        self.description = data.get('description', self.description)
        self.cover_image = data.get('coverImage', self.cover_image)
        self.featured = bool(data.get('featured', self.featured))
        self.status = data.get('status', self.status)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if 'features' in data:
            if isinstance(data['features'], str):
                self.features = [f.strip() for f in data['features'].split(',') if f.strip()]
            else:
                self.features = data['features']
                
        if 'subcategories' in data:
            if isinstance(data['subcategories'], str):
                self.subcategories = [s.strip() for s in data['subcategories'].split(',') if s.strip()]
            else:
                self.subcategories = data['subcategories']
                
        if 'tags' in data:
            if isinstance(data['tags'], str):
                self.tags = [t.strip() for t in data['tags'].split(',') if t.strip()]
            else:
                self.tags = data['tags']
                
        if 'images' in data:
            if isinstance(data['images'], str):
                self.images = [i.strip() for i in data['images'].split(',') if i.strip()]
            else:
                self.images = data['images']
        
        self.updated_at = datetime.utcnow()

# models/booking.py
class Booking(db.Model):
    __tablename__ = 'bookings'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    phone = db.Column(db.String(20), nullable=False)
    email = db.Column(db.String(100))
    service_id = db.Column(db.Integer, db.ForeignKey('services.id'))
    service_title = db.Column(db.String(100))
    event_date = db.Column(db.Date)
    event_time = db.Column(db.Time)
    guests_count = db.Column(db.Integer)
    budget = db.Column(db.String(50))
    location = db.Column(db.String(200))
    message = db.Column(db.Text)
    status = db.Column(db.String(20), default='new')  # new, confirmed, cancelled, completed
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    service = db.relationship('Service', backref='bookings')
    
    def to_dict(self):
        try:
            return {
                'id': self.id,
                'name': self.name,
                'phone': self.phone,
                'email': self.email,
                'service_id': self.service_id,
                'service_title': self.service_title if self.service_title else None,
                'event_date': self.event_date.isoformat() if self.event_date else None,
                'event_time': self.event_time.isoformat() if self.event_time else None,
                'guests_count': self.guests_count,
                'budget': self.budget,
                'location': self.location,
                'message': self.message,
                'status': self.status,
                'created_at': self.created_at.isoformat()
            }
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ to_dict:", e)
            return {'error': str(e)}

# models/review.py
class Review(db.Model):
    __tablename__ = 'reviews'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), nullable=True)
    phone = db.Column(db.String(20), nullable=True)
    service_type = db.Column(db.String(100), nullable=True)
    service_id = db.Column(db.Integer, db.ForeignKey('services.id'), nullable=True)
    rating = db.Column(db.Integer, nullable=False)
    text = db.Column(db.Text, nullable=False)
    avatar = db.Column(db.String(10), default='üë§')
    approved = db.Column(db.Boolean, default=False, nullable=False)
    featured = db.Column(db.Boolean, default=False, nullable=False)  # –ò–∑–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
    helpful_count = db.Column(db.Integer, default=0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ø–æ–ª–µ–∑–Ω–æ"
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # –°–≤—è–∑–∏
    service = db.relationship('Service', backref='reviews', lazy=True)
    
    def __init__(self, **kwargs):
        super(Review, self).__init__(**kwargs)
        if self.created_at is None:
            self.created_at = datetime.utcnow()
        if self.updated_at is None:
            self.updated_at = datetime.utcnow()
    
    def to_dict(self, include_personal_info=False):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = {
            'id': self.id,
            'name': self.name,
            'service_type': self.service_type,
            'service_id': self.service_id,
            'rating': self.rating,
            'text': self.text,
            'avatar': self.avatar,
            'approved': self.approved,
            'featured': self.featured,
            'helpful_count': self.helpful_count,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
            'date': self.created_at.isoformat() if self.created_at else None  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
        if include_personal_info:
            data.update({
                'email': self.email,
                'phone': self.phone
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑—å
        if self.service:
            data['service'] = {
                'id': self.service.id,
                'name': self.service.name,
                'slug': getattr(self.service, 'slug', None)
            }
        
        return data

# –ï–î–ò–ù–ê–Ø –ú–û–î–ï–õ–¨ –ü–û–†–¢–§–û–õ–ò–û (–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –ø–æ–ª—è –∏–∑ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨ –ü–û–†–¢–§–û–õ–ò–û
class Portfolio(db.Model):
    __tablename__ = 'portfolio'
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    category = db.Column(db.String(50), nullable=False)  # children, wedding, corporate, anniversary, show
    date = db.Column(db.Date, nullable=False)  # –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    description = db.Column(db.Text)
    budget = db.Column(db.String(50))  # –ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "250,000 ‚Ç∏")
    client = db.Column(db.String(100))  # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    status = db.Column(db.String(20), default='draft')  # draft, published, archived
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    location = db.Column(db.String(200))  # –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    guests = db.Column(db.String(50))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "25 –¥–µ—Ç–µ–π")
    rating = db.Column(db.Integer, default=5)  # –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞ (1-5)
    tags = db.Column(db.JSON)  # –¢–µ–≥–∏ ['–ø—Ä–∏–Ω—Ü–µ—Å—Å—ã', 'disney', '–∞–Ω–∏–º–∞—Ç–æ—Ä—ã']
    
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images = db.Column(db.JSON)  # –°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    cover_image = db.Column(db.String(500))  # URL –æ–±–ª–æ–∂–∫–∏
    photos_count = db.Column(db.Integer, default=0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    
    # –ü–∞–∫–µ—Ç—ã —É—Å–ª—É–≥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    packages = db.Column(db.JSON)  # [{"name": "–ë–∞–∑–æ–≤—ã–π", "price": "85,000 ‚Ç∏", "features": [...]}, ...]
    
    # –°—Ç–∞—Ç—É—Å –∏ –º–µ—Ç—Ä–∏–∫–∏
    featured = db.Column(db.Boolean, default=False)  # –ò–∑–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    views = db.Column(db.Integer, default=0)  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self, for_admin=False):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API"""
        data = {
            'id': self.id,
            'title': self.title,
            'category': self.category,
            'date': self.date.isoformat() if self.date else None,
            'description': self.description,
            'budget': self.budget,
            'status': self.status,
            'location': self.location,
            'guests': self.guests,
            'rating': self.rating,
            'tags': self.tags or [],
            'images': self.images or [],
            'coverImage': self.cover_image,
            'photos': self.photos_count,
            'packages': self.packages or [],
            'featured': self.featured,
            'views': self.views,
            'created': self.created_at.strftime('%Y-%m-%d') if self.created_at else None,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
        
        # –î–ª—è –∞–¥–º–∏–Ω–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if for_admin:
            data.update({
                'client': self.client,
            })
        
        return data
    
    def increment_views(self, ip_address=None, user_agent=None):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ç–æ–≥–æ –∂–µ IP –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
        if ip_address:
            recent_view = PortfolioView.query.filter(
                PortfolioView.portfolio_id == self.id,
                PortfolioView.ip_address == ip_address,
                PortfolioView.viewed_at > (datetime.utcnow() - timedelta(minutes=30))
            ).first()
            
            if recent_view:
                return False  # –ù–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        view = PortfolioView(
            portfolio_id=self.id,
            ip_address=ip_address,
            user_agent=user_agent
        )
        db.session.add(view)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
        self.views = (self.views or 0) + 1
        db.session.commit()
        return True
    
    def update_photos_count(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if self.images:
            self.photos_count = len(self.images)
        else:
            self.photos_count = 0
        db.session.commit()
    
    @classmethod
    def get_by_status(cls, status='published'):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        return cls.query.filter(cls.status == status).order_by(cls.date.desc()).all()
    
    @classmethod
    def get_by_category(cls, category, status='published'):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        query = cls.query.filter(cls.category == category)
        if status:
            query = query.filter(cls.status == status)
        return query.order_by(cls.date.desc()).all()
    
    @classmethod
    def get_featured(cls, limit=6, status='published'):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"""
        query = cls.query.filter(cls.featured == True)
        if status:
            query = query.filter(cls.status == status)
        return query.order_by(cls.date.desc()).limit(limit).all()
    
    @classmethod
    def get_stats(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        total = cls.query.count()
        published = cls.query.filter(cls.status == 'published').count()
        draft = cls.query.filter(cls.status == 'draft').count()
        archived = cls.query.filter(cls.status == 'archived').count()
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = db.session.query(
            cls.category,
            func.count(cls.id).label('count')
        ).filter(cls.status == 'published').group_by(cls.category).all()
        
        return {
            'total': total,
            'published': published,
            'draft': draft,
            'archived': archived,
            'total_views': db.session.query(func.sum(cls.views)).scalar() or 0,
            'categories': [{'name': cat, 'count': count} for cat, count in categories]
        }


class PortfolioView(db.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    __tablename__ = 'portfolio_views'
    
    id = db.Column(db.Integer, primary_key=True)
    portfolio_id = db.Column(db.Integer, db.ForeignKey('portfolio.id'), nullable=False)
    ip_address = db.Column(db.String(45))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ IPv6
    user_agent = db.Column(db.String(500))
    viewed_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    portfolio = db.relationship('Portfolio', backref='view_records')
    
    def to_dict(self):
        return {
            'id': self.id,
            'portfolio_id': self.portfolio_id,
            'ip_address': self.ip_address,
            'user_agent': self.user_agent,
            'viewed_at': self.viewed_at.isoformat() if self.viewed_at else None
        }

class TeamMember(db.Model):
    __tablename__ = 'team_members'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    role = db.Column(db.String(100), nullable=False)
    image = db.Column(db.String(500))
    description = db.Column(db.Text)
    phone = db.Column(db.String(20))
    email = db.Column(db.String(100))
    specialization = db.Column(db.JSON)  # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'role': self.role,
            'image': self.image,
            'description': self.description,
            'phone': self.phone,
            'email': self.email,
            'specialization': self.specialization,
            'active': self.active
        }

# models/settings.py
class Settings(db.Model):
    __tablename__ = 'settings'
    
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text)
    value_type = db.Column(db.String(20), default='string')  # string, boolean, json, number
    category = db.Column(db.String(50))  # company, social, notifications, seo, integration
    description = db.Column(db.String(255))  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    @classmethod
    def get_settings_dict(cls, category=None):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        query = cls.query
        if category:
            query = query.filter(cls.category == category)
        
        settings = query.all()
        result = {}
        
        for setting in settings:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∏–ø–æ–º
            if setting.value_type == 'boolean':
                result[setting.key] = setting.value.lower() in ('true', '1', 'yes')
            elif setting.value_type == 'number':
                try:
                    result[setting.key] = float(setting.value) if '.' in setting.value else int(setting.value)
                except:
                    result[setting.key] = setting.value
            elif setting.value_type == 'json':
                try:
                    import json
                    result[setting.key] = json.loads(setting.value)
                except:
                    result[setting.key] = {}
            else:
                result[setting.key] = setting.value
        
        return result
    
    @classmethod
    def update_setting(cls, key, value, value_type='string', category=None, description=None):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        setting = cls.query.filter(cls.key == key).first()
        
        if setting:
            setting.value = str(value) if value is not None else None
            setting.value_type = value_type
            setting.updated_at = datetime.utcnow()
        else:
            setting = cls(
                key=key,
                value=str(value) if value is not None else None,
                value_type=value_type,
                category=category,
                description=description
            )
            db.session.add(setting)
        
        db.session.commit()
        return setting
    
    @classmethod
    def get_setting(cls, key, default=None):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        setting = cls.query.filter(cls.key == key).first()
        if not setting:
            return default
        
        if setting.value_type == 'boolean':
            return setting.value.lower() in ('true', '1', 'yes')
        elif setting.value_type == 'number':
            try:
                return float(setting.value) if '.' in setting.value else int(setting.value)
            except:
                return setting.value
        elif setting.value_type == 'json':
            try:
                import json
                return json.loads(setting.value)
            except:
                return {}
        else:
            return setting.value
    
    @classmethod
    def init_default_settings(cls):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        defaults = [
            # –ö–æ–º–ø–∞–Ω–∏—è
            ('company_name', '–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –ß—É–¥–µ—Å', 'string', 'company', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'),
            ('company_email', 'info@prazdnikvdom.kz', 'string', 'company', 'Email –∫–æ–º–ø–∞–Ω–∏–∏'),
            ('company_phone', '+7 (777) 123-45-67', 'string', 'company', '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω'),
            ('whatsapp_phone', '+7 (777) 987-65-43', 'string', 'company', 'WhatsApp –Ω–æ–º–µ—Ä'),
            ('company_address', '–≥. –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫, —É–ª. –õ–µ–Ω–∏–Ω–∞, 123', 'string', 'company', '–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏'),
            ('company_description', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', 'string', 'company', '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'),
            
            # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
            ('social_instagram', 'https://instagram.com/korolevstvo_chudes', 'string', 'social', 'Instagram'),
            ('social_facebook', '', 'string', 'social', 'Facebook'),
            ('social_youtube', '', 'string', 'social', 'YouTube'),
            ('social_telegram', '', 'string', 'social', 'Telegram'),
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            ('email_notifications', 'true', 'boolean', 'notifications', 'Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
            ('telegram_notifications', 'false', 'boolean', 'notifications', 'Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
            ('sms_notifications', 'false', 'boolean', 'notifications', 'SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
            ('notification_email', 'admin@prazdnikvdom.kz', 'string', 'notifications', 'Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
            
            # SEO
            ('site_title', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –≤ –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–µ - –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –ß—É–¥–µ—Å', 'string', 'seo', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∞–π—Ç–∞'),
            ('site_description', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –≤ –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–µ. –î–µ—Ç—Å–∫–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, —Å–≤–∞–¥—å–±—ã, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã.', 'string', 'seo', '–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞'),
            ('site_keywords', '–ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫, –∞–Ω–∏–º–∞—Ç–æ—Ä—ã, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–≤–∞–¥–µ–±', 'string', 'seo', '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'),
            ('google_analytics_id', '', 'string', 'seo', 'Google Analytics ID'),
            ('yandex_metrica_id', '', 'string', 'seo', '–Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞ ID'),
            
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            ('kaspi_api_key', '', 'string', 'integration', 'API –∫–ª—é—á Kaspi'),
            ('one_c_url', '', 'string', 'integration', 'URL —Å–µ—Ä–≤–µ—Ä–∞ 1C'),
            ('smtp_server', '', 'string', 'integration', 'SMTP —Å–µ—Ä–≤–µ—Ä'),
            ('smtp_port', '', 'string', 'integration', 'SMTP –ø–æ—Ä—Ç'),
        ]
        
        for key, value, value_type, category, description in defaults:
            if not cls.query.filter(cls.key == key).first():
                setting = cls(
                    key=key,
                    value=value,
                    value_type=value_type,
                    category=category,
                    description=description
                )
                db.session.add(setting)
        
        db.session.commit()
    
    def to_dict(self):
        return {
            'id': self.id,
            'key': self.key,
            'value': self.value,
            'value_type': self.value_type,
            'category': self.category,
            'description': self.description,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }

class BlogPost(db.Model):
    __tablename__ = 'blog_posts'
    
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    slug = db.Column(db.String(250), unique=True, nullable=False)
    cover_image = db.Column(db.String(500))  # URL –æ–±–ª–æ–∂–∫–∏
    category = db.Column(db.String(50), nullable=False)
    content = db.Column(db.Text, nullable=False)
    excerpt = db.Column(db.Text)
    tags = db.Column(db.JSON)  # –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
    status = db.Column(db.String(20), default='draft')  # draft, published, scheduled, archived
    featured = db.Column(db.Boolean, default=False)
    
    # SEO –ø–æ–ª—è
    meta_title = db.Column(db.String(60))
    meta_description = db.Column(db.String(160))
    
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    featured_image = db.Column(db.String(500))  # URL –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    gallery = db.Column(db.JSON)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    # –ê–≤—Ç–æ—Ä
    author_id = db.Column(db.Integer, db.ForeignKey('admins.id'), nullable=False)
    author_name = db.Column(db.String(100), nullable=False)  # –ü—É–±–ª–∏—á–Ω–æ–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    views_count = db.Column(db.Integer, default=0)
    likes_count = db.Column(db.Integer, default=0)
    shares_count = db.Column(db.Integer, default=0)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    scheduled_date = db.Column(db.DateTime)  # –î–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    published_at = db.Column(db.DateTime)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # –°–≤—è–∑–∏
    author = db.relationship('Admin', backref='blog_posts', lazy=True)
    
    def __init__(self, **kwargs):
        super(BlogPost, self).__init__(**kwargs)
        if not self.slug and self.title:
            self.slug = self.generate_slug(self.title)
        if self.status == 'published' and not self.published_at:
            self.published_at = datetime.utcnow()
    
    @staticmethod
    def generate_slug(title):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        import re
        import unicodedata
        
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
        translit_dict = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        
        slug = title.lower()
        for ru, en in translit_dict.items():
            slug = slug.replace(ru, en)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        slug = re.sub(r'[^a-zA-Z0-9\s-]', '', slug)
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –Ω–∞ –æ–¥–∏–Ω –¥–µ—Ñ–∏—Å
        slug = re.sub(r'[\s-]+', '-', slug)
        # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        slug = slug.strip('-')
        
        return slug
    
    @classmethod
    def get_stats(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –°–£–ë–î"""
        try:
            total = cls.query.count()
            published = cls.query.filter(cls.status == 'published').count()
            draft = cls.query.filter(cls.status == 'draft').count()
            scheduled = cls.query.filter(cls.status == 'scheduled').count()
            archived = cls.query.filter(cls.status == 'archived').count()
            featured = cls.query.filter(cls.featured == True, cls.status == 'published').count()
            
            # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = db.session.query(
                cls.category,
                func.count(cls.id).label('count')
            ).filter(cls.status == 'published').group_by(cls.category).all()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            total_views = db.session.query(func.sum(cls.views_count)).scalar() or 0
            
            # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            avg_views = db.session.query(func.avg(cls.views_count)).filter(
                cls.views_count.isnot(None),
                cls.status == 'published'
            ).scalar() or 0
            
            return {
                'total': total,
                'published': published,
                'draft': draft,
                'scheduled': scheduled,
                'archived': archived,
                'featured': featured,
                'total_views': int(total_views),
                'avg_views': round(float(avg_views), 1),
                'categories': [
                    {
                        'name': cat, 
                        'count': count,
                        'slug': cat.lower().replace(' ', '-') if cat else 'uncategorized'
                    } 
                    for cat, count in categories
                ]
            }
        except Exception as e:
            print(f"Error getting blog stats: {e}")
            return {
                'total': 0,
                'published': 0,
                'draft': 0,
                'scheduled': 0,
                'archived': 0,
                'featured': 0,
                'total_views': 0,
                'avg_views': 0,
                'categories': []
            }

    @classmethod
    def get_monthly_stats(cls, limit_months=12):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Å—è—Ü–∞–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SQLite –∏ PostgreSQL"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            engine_name = db.engine.name
            
            if engine_name == 'postgresql':
                # –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º date_trunc
                monthly_query = db.session.query(
                    db.func.date_trunc('month', cls.created_at).label('month'),
                    db.func.count(cls.id).label('posts_count'),
                    db.func.sum(cls.views_count).label('total_views')
                ).group_by(
                    db.func.date_trunc('month', cls.created_at)
                ).order_by(
                    db.func.date_trunc('month', cls.created_at).desc()
                ).limit(limit_months)
            else:
                # –î–ª—è SQLite –∏—Å–ø–æ–ª—å–∑—É–µ–º strftime
                monthly_query = db.session.query(
                    db.func.strftime('%Y-%m', cls.created_at).label('month'),
                    db.func.count(cls.id).label('posts_count'),
                    db.func.sum(cls.views_count).label('total_views')
                ).group_by(
                    db.func.strftime('%Y-%m', cls.created_at)
                ).order_by(
                    db.func.strftime('%Y-%m', cls.created_at).desc()
                ).limit(limit_months)
            
            results = monthly_query.all()
            
            monthly_stats = []
            for month, posts_count, total_views in results:
                monthly_stats.append({
                    'month': str(month) if month else 'N/A',
                    'posts_count': posts_count or 0,
                    'total_views': int(total_views) if total_views else 0
                })
            
            return monthly_stats
            
        except Exception as e:
            print(f"Error getting monthly stats: {e}")
            return []

    @classmethod
    def get_top_posts(cls, limit=10, by_views=True):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å—Ç–∞—Ç–µ–π"""
        try:
            if by_views:
                query = cls.query.filter(
                    cls.status == 'published',
                    cls.views_count.isnot(None)
                ).order_by(cls.views_count.desc())
            else:
                query = cls.query.filter(
                    cls.status == 'published'
                ).order_by(cls.created_at.desc())
            
            posts = query.limit(limit).all()
            
            return [
                {
                    'id': post.id,
                    'title': post.title,
                    'slug': post.slug,
                    'category': post.category,
                    'views_count': post.views_count or 0,
                    'published_at': post.published_at.isoformat() if post.published_at else None,
                    'author_name': post.author_name
                } for post in posts
            ]
            
        except Exception as e:
            print(f"Error getting top posts: {e}")
            return []

    @classmethod
    def search_advanced(cls, query_text, category=None, status='published', limit=20):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π"""
        try:
            search_filter = f"%{query_text}%"
            
            query = cls.query.filter(
                db.or_(
                    cls.title.ilike(search_filter),
                    cls.content.ilike(search_filter),
                    cls.excerpt.ilike(search_filter)
                )
            )
            
            if status:
                query = query.filter(cls.status == status)
            
            if category:
                query = query.filter(cls.category == category)
            
            posts = query.order_by(cls.published_at.desc()).limit(limit).all()
            
            return posts
            
        except Exception as e:
            print(f"Error in advanced search: {e}")
            return []
    
    def to_dict(self, include_content=True, for_admin=False):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API"""
        data = {
            'id': self.id,
            'title': self.title,
            'slug': self.slug,
            'category': self.category,
            'cover_image': self.cover_image,
            'excerpt': self.excerpt,
            'tags': self.tags or [],
            'status': self.status,
            'featured': self.featured,
            'featured_image': self.featured_image,
            'gallery': self.gallery or [],
            'author_name': self.author_name,
            'views_count': self.views_count,
            'likes_count': self.likes_count,
            'shares_count': self.shares_count,
            'published_at': self.published_at.isoformat() if self.published_at else None,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
            'date': self.published_at.strftime('%Y-%m-%d') if self.published_at else self.created_at.strftime('%Y-%m-%d')
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è —Å–ø–∏—Å–∫–æ–≤ —Å—Ç–∞—Ç–µ–π –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è)
        if include_content:
            data['content'] = self.content
        
        # –î–ª—è –∞–¥–º–∏–Ω–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if for_admin:
            data.update({
                'author_id': self.author_id,
                'meta_title': self.meta_title,
                'meta_description': self.meta_description,
                'scheduled_date': self.scheduled_date.isoformat() if self.scheduled_date else None,
            })
        
        return data
    
    def update_from_dict(self, data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö"""
        self.title = data.get('title', self.title)
        self.category = data.get('category', self.category)
        self.content = data.get('content', self.content)
        self.excerpt = data.get('excerpt', self.excerpt)
        self.status = data.get('status', self.status)
        self.featured = bool(data.get('featured', self.featured))
        self.featured_image = data.get('featured_image', self.featured_image)
        self.author_name = data.get('author_name', self.author_name)
        self.meta_title = data.get('meta_title', self.meta_title)
        self.meta_description = data.get('meta_description', self.meta_description)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ slug
        if 'slug' in data and data['slug']:
            self.slug = data['slug']
        elif self.title:
            self.slug = self.generate_slug(self.title)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if 'tags' in data:
            if isinstance(data['tags'], str):
                self.tags = [t.strip() for t in data['tags'].split(',') if t.strip()]
            else:
                self.tags = data['tags']
        
        if 'gallery' in data:
            if isinstance(data['gallery'], str):
                self.gallery = [g.strip() for g in data['gallery'].split(',') if g.strip()]
            else:
                self.gallery = data['gallery']
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if data.get('status') == 'published' and not self.published_at:
            self.published_at = datetime.utcnow()
        elif data.get('status') != 'published':
            self.published_at = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if 'scheduled_date' in data:
            if data['scheduled_date']:
                try:
                    self.scheduled_date = datetime.fromisoformat(data['scheduled_date'])
                except:
                    self.scheduled_date = None
            else:
                self.scheduled_date = None
        
        self.updated_at = datetime.utcnow()
    
    def increment_views(self, ip_address=None, user_agent=None):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        if ip_address:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å —Ç–æ–≥–æ –∂–µ IP –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
            recent_view = BlogView.query.filter(
                BlogView.blog_post_id == self.id,
                BlogView.ip_address == ip_address,
                BlogView.viewed_at > (datetime.utcnow() - timedelta(minutes=30))
            ).first()
            
            if recent_view:
                return False  # –ù–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        view = BlogView(
            blog_post_id=self.id,
            ip_address=ip_address,
            user_agent=user_agent
        )
        db.session.add(view)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
        self.views_count = (self.views_count or 0) + 1
        db.session.commit()
        return True
    
    @classmethod
    def get_published(cls, limit=None, category=None, featured=None):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏"""
        query = cls.query.filter(cls.status == 'published')
        
        if category:
            query = query.filter(cls.category == category)
        
        if featured is not None:
            query = query.filter(cls.featured == featured)
        
        query = query.order_by(cls.published_at.desc())
        
        if limit:
            query = query.limit(limit)
        
        return query.all()
    
    @classmethod
    def get_by_slug(cls, slug):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ slug"""
        return cls.query.filter(
            cls.slug == slug,
            cls.status == 'published'
        ).first()
    
    @classmethod
    def search(cls, query_text, limit=10):
        """–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π"""
        search_filter = f"%{query_text}%"
        return cls.query.filter(
            cls.status == 'published',
            db.or_(
                cls.title.ilike(search_filter),
                cls.content.ilike(search_filter),
                cls.excerpt.ilike(search_filter)
            )
        ).order_by(cls.published_at.desc()).limit(limit).all()
    
    @classmethod
    def get_stats(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–≥–∞"""
        total = cls.query.count()
        published = cls.query.filter(cls.status == 'published').count()
        draft = cls.query.filter(cls.status == 'draft').count()
        featured = cls.query.filter(cls.featured == True, cls.status == 'published').count()
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = db.session.query(
            cls.category,
            func.count(cls.id).label('count')
        ).filter(cls.status == 'published').group_by(cls.category).all()
        
        return {
            'total': total,
            'published': published,
            'draft': draft,
            'featured': featured,
            'total_views': db.session.query(func.sum(cls.views_count)).scalar() or 0,
            'categories': [{'name': cat, 'count': count} for cat, count in categories]
        }


class BlogView(db.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞"""
    __tablename__ = 'blog_views'
    
    id = db.Column(db.Integer, primary_key=True)
    blog_post_id = db.Column(db.Integer, db.ForeignKey('blog_posts.id'), nullable=False)
    ip_address = db.Column(db.String(45))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ IPv6
    user_agent = db.Column(db.String(500))
    viewed_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    blog_post = db.relationship('BlogPost', backref='view_records')
    
    def to_dict(self):
        return {
            'id': self.id,
            'blog_post_id': self.blog_post_id,
            'ip_address': self.ip_address,
            'user_agent': self.user_agent,
            'viewed_at': self.viewed_at.isoformat() if self.viewed_at else None
        }


class BlogComment(db.Model):
    """–ú–æ–¥–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å—Ç–∞—Ç—å—è–º –±–ª–æ–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    __tablename__ = 'blog_comments'
    
    id = db.Column(db.Integer, primary_key=True)
    blog_post_id = db.Column(db.Integer, db.ForeignKey('blog_posts.id'), nullable=False)
    author_name = db.Column(db.String(100), nullable=False)
    author_email = db.Column(db.String(120), nullable=False)
    content = db.Column(db.Text, nullable=False)
    approved = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    blog_post = db.relationship('BlogPost', backref='comments')
    
    def to_dict(self):
        return {
            'id': self.id,
            'blog_post_id': self.blog_post_id,
            'author_name': self.author_name,
            'content': self.content,
            'created_at': self.created_at.isoformat() if self.created_at else None
        }
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å TelegramUser –¥–ª—è models/__init__.py

class TelegramUser(db.Model):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram –±–æ—Ç–∞"""
    __tablename__ = 'telegram_users'
    __table_args__ = {'extend_existing': True}  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    id = db.Column(db.Integer, primary_key=True)
    telegram_id = db.Column(db.String(50), unique=True, nullable=False, index=True)
    username = db.Column(db.String(100))
    first_name = db.Column(db.String(100))
    last_name = db.Column(db.String(100))
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    phone = db.Column(db.String(20), index=True)
    email = db.Column(db.String(120))
    
    # –°—Ç–∞—Ç—É—Å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    is_verified = db.Column(db.Boolean, default=False, nullable=False, index=True)
    registration_step = db.Column(db.String(20), default='start', nullable=False)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    last_activity = db.Column(db.DateTime)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_enabled = db.Column(db.Boolean, default=True, nullable=False)
    language = db.Column(db.String(10), default='ru', nullable=False)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    messages_sent = db.Column(db.Integer, default=0, nullable=False)
    messages_received = db.Column(db.Integer, default=0, nullable=False)
    
    def __init__(self, **kwargs):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        super(TelegramUser, self).__init__(**kwargs)
        if self.created_at is None:
            self.created_at = datetime.utcnow()
        if self.updated_at is None:
            self.updated_at = datetime.utcnow()
    
    def __repr__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        return f'<TelegramUser {self.telegram_id}: {self.first_name}>'
    
    def to_dict(self, include_private=False):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API"""
        data = {
            'id': self.id,
            'telegram_id': self.telegram_id,
            'username': self.username,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'is_verified': self.is_verified,
            'registration_step': self.registration_step,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
            'last_activity': self.last_activity.isoformat() if self.last_activity else None,
            'notifications_enabled': self.notifications_enabled,
            'language': self.language,
            'messages_count': self.messages_sent + self.messages_received
        }
        
        if include_private:
            data.update({
                'phone': self.phone,
                'email': self.email,
                'messages_sent': self.messages_sent,
                'messages_received': self.messages_received
            })
        
        return data
    
    def get_full_name(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.first_name and self.last_name:
            return f"{self.first_name} {self.last_name}"
        elif self.first_name:
            return self.first_name
        elif self.last_name:
            return self.last_name
        elif self.username:
            return f"@{self.username}"
        else:
            return f"User {self.telegram_id}"
    
    def get_display_name(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if self.first_name:
            return self.first_name
        elif self.username:
            return f"@{self.username}"
        else:
            return f"User {self.telegram_id}"
    
    def update_activity(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.last_activity = datetime.utcnow()
        self.updated_at = datetime.utcnow()
        try:
            db.session.commit()
        except:
            db.session.rollback()
    
    def increment_sent_messages(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.messages_sent = (self.messages_sent or 0) + 1
        self.update_activity()
    
    def increment_received_messages(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.messages_received = (self.messages_received or 0) + 1
        self.update_activity()
    
    def set_phone(self, phone):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        import re
        clean_phone = re.sub(r'[^\d+]', '', phone)
        
        if clean_phone.startswith('8') and len(clean_phone) == 11:
            clean_phone = '+7' + clean_phone[1:]
        elif clean_phone.startswith('7') and len(clean_phone) == 11:
            clean_phone = '+' + clean_phone
        elif not clean_phone.startswith('+'):
            clean_phone = '+' + clean_phone
        
        self.phone = clean_phone
        self.updated_at = datetime.utcnow()
    
    def set_email(self, email):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å email"""
        if email and '@' in email:
            self.email = email.lower().strip()
            self.updated_at = datetime.utcnow()
            return True
        return False
    
    def complete_registration(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.is_verified = True
        self.registration_step = 'verified'
        self.updated_at = datetime.utcnow()
        try:
            db.session.commit()
        except:
            db.session.rollback()
    
    def update_registration_step(self, step):
        """–û–±–Ω–æ–≤–∏—Ç—å —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        valid_steps = ['start', 'phone', 'email', 'verified']
        if step in valid_steps:
            self.registration_step = step
            self.updated_at = datetime.utcnow()
            try:
                db.session.commit()
                return True
            except:
                db.session.rollback()
                return False
        return False
    
    def get_bookings(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.phone:
            return []
        
        try:
            return Booking.query.filter_by(phone=self.phone).order_by(Booking.created_at.desc()).all()
        except:
            return []
    
    def get_bookings_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.phone:
            return 0
        
        try:
            return Booking.query.filter_by(phone=self.phone).count()
        except:
            return 0
    
    def get_recent_bookings(self, limit=5):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.phone:
            return []
        
        try:
            return Booking.query.filter_by(phone=self.phone).order_by(
                Booking.created_at.desc()
            ).limit(limit).all()
        except:
            return []
    
    def has_active_bookings(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
        if not self.phone:
            return False
        
        try:
            active_statuses = ['new', 'confirmed']
            return Booking.query.filter(
                Booking.phone == self.phone,
                Booking.status.in_(active_statuses)
            ).count() > 0
        except:
            return False
    
    def can_receive_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        return (
            self.is_verified and 
            self.notifications_enabled and 
            self.phone is not None
        )
    
    @classmethod
    def find_by_telegram_id(cls, telegram_id):
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        try:
            return cls.query.filter_by(telegram_id=str(telegram_id)).first()
        except:
            return None
    
    @classmethod
    def find_by_phone(cls, phone, verified_only=True):
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            query = cls.query.filter_by(phone=phone)
            if verified_only:
                query = query.filter_by(is_verified=True)
            return query.first()
        except:
            return None
    
    @classmethod
    def get_verified_users(cls):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            return cls.query.filter_by(is_verified=True).all()
        except:
            return []
    
    @classmethod
    def get_statistics(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            total = cls.query.count()
            verified = cls.query.filter_by(is_verified=True).count()
            unverified = total - verified
            
            return {
                'total': total,
                'verified': verified,
                'unverified': unverified,
                'verification_rate': round((verified / total * 100), 1) if total > 0 else 0
            }
        except:
            return {
                'total': 0,
                'verified': 0,
                'unverified': 0,
                'verification_rate': 0
            }
    
    @classmethod
    def create_from_telegram_data(cls, telegram_data):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram"""
        try:
            existing_user = cls.find_by_telegram_id(telegram_data['id'])
            
            if existing_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_user.username = telegram_data.get('username')
                existing_user.first_name = telegram_data.get('first_name')
                existing_user.last_name = telegram_data.get('last_name')
                existing_user.updated_at = datetime.utcnow()
                try:
                    db.session.commit()
                except:
                    db.session.rollback()
                return existing_user
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = cls(
                telegram_id=str(telegram_data['id']),
                username=telegram_data.get('username'),
                first_name=telegram_data.get('first_name'),
                last_name=telegram_data.get('last_name'),
                registration_step='start'
            )
            
            db.session.add(new_user)
            try:
                db.session.commit()
                return new_user
            except:
                db.session.rollback()
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü models/__init__.py)

def find_telegram_user_by_phone(phone):
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return TelegramUser.find_by_phone(phone, verified_only=True)

def get_telegram_user_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram"""
    return TelegramUser.get_statistics()